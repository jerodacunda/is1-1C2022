

----STARTUP---- (22 May 2022 18:49:41) as /home/agus/Documents/ing1 2022/portfolio1/linux64/CuisUniversity-5096.image!


----End fileIn of /home/agus/Documents/ing1 2022/is1-1C2022/05-Portfolio1/Portfolio-Ejercicio.st----!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 18:53:40'!
addTransactionsTo: aCollectionOfTransacctions

	xxxs do: [ :aXxx | aXxx addTransactionsTo: aCollectionOfTransacctions].
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 18:53:47' prior: 50474756!
addTransactionsTo: aCollectionOfTransactions

	xxxs do: [ :aXxx | aXxx addTransactionsTo: aCollectionOfTransactions].
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 18:54:23' prior: 50474684 overrides: 50474605!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.
	self addTransactionsTo: transactions.
	
	^transactions.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/22/2022 18:55:20'!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/22/2022 18:55:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/22/2022 18:55:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/22/2022 18:55:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/22/2022 18:55:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/22/2022 18:55:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/22/2022 18:55:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/22/2022 18:55:21'!
PASSED!

!testRun: #PortfolioTests #test01 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test02 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'AF 5/22/2022 18:55:23'!
PASSED!
!XXX methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 18:56:19'!
addTransactionsTo: aCollectionOfTransactions 

	self subclassResponsibility ! !

!classRenamed: #XXX as: #BankAccount stamp: 'AF 5/22/2022 19:00:11'!
Smalltalk renameClassNamed: #XXX as: #BankAccount!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42'!
addBankAccount: aXxx
	
	| roots |
		
	roots _ self findRoots.
	roots do: [ :aRoot | aRoot assertAXxxIsNotDescendant: aXxx. ].
	
	xxxs add: aXxx.
	(aXxx isKindOf: Portfolio) ifTrue: [aXxx markAsParent: self]! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474310!
test15

	| portfolio portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolio addBankAccount: portfolioParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio xxxIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474135!
test04

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 125 equals: portfolio balance
	
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474361!
test18

	| account portfolio portfolioParent1 portfolioParent2 |
	
	account _ ReceptiveAccount new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	portfolio _ Portfolio new.
		
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: account.	
	
	self should: [ portfolio addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio xxxIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474227!
test10
	
	| account deposit portfolio |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	deposit _ Deposit register: 10 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: (portfolio hasRegistered: deposit).
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474325!
test16

	| portfolio portfolioParent1 portfolioParent2 |
	
	portfolio _ Portfolio new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.	
	
	self should: [ portfolio addBankAccount: portfolioParent1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio xxxIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474262!
test12

	| account portfolio |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio xxxIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474276!
test13

	| account portfolio portfolioParent |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.	
	portfolioParent _ Portfolio new.
	
	portfolio addBankAccount: account.
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolioParent addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio xxxIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474343!
test17

	| portfolio portfolioGrandParent portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.	
	portfolioGrandParent _ Portfolio new.
	
	portfolioGrandParent addBankAccount: portfolioParent.
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolio addBankAccount: portfolioGrandParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio xxxIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474122!
test03

	| portfolio account portfolioToAdd |
	
	account _ ReceptiveAccount new.	
	portfolioToAdd _ Portfolio new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolioToAdd addBankAccount: account.
	portfolio addBankAccount: portfolioToAdd.
	
	self assert: 100 equals: portfolio balance
	
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474150!
test05

	| portfolio account1 account2 portfolioToAdd1 portfolioToAdd2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd1 _ Portfolio new.
	portfolioToAdd2 _ Portfolio new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.	
	
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.	
	
	portfolioToAdd1 addBankAccount: account1.	
	portfolioToAdd2 addBankAccount: account2.	
	
	portfolio addBankAccount: portfolioToAdd1.
	portfolio addBankAccount: portfolioToAdd2.
	
	self assert: 150 equals: portfolio balance
	
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474293!
test14

	| account portfolioParent portfolio |
	
	account _ ReceptiveAccount new.	
	portfolioParent _ Portfolio new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolioParent addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio xxxIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474206!
test09

	| portfolio portfolioToAdd account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd _ Portfolio new.
	portfolio _ Portfolio new.
	
	Deposit register: 10 on: account1. 
	
	Deposit register: 100 on: account2. 
	Withdraw register: 50 on: account2.	
	
	portfolioToAdd addBankAccount: account2.	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: portfolioToAdd. 
	
	self assert: 3 equals: portfolio transactions size.
	self assert: (account1 transactions, portfolioToAdd transactions) asSet equals: portfolio transactions asSet
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474176!
test07

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: 1 equals: portfolio transactions size.
	self assert: account transactions equals: portfolio transactions 
	
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474188!
test08

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1. 
	
	Deposit register: 50 on: account2.
	Withdraw register: 10 on: account2.
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 3 equals: portfolio transactions size.
	self assert: (account1 transactions, account2 transactions) asSet equals: portfolio transactions asSet.
	
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474112!
test02

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolio addBankAccount: account.
	
	self assert: 100 equals: portfolio balance
	
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:00:42' prior: 50474238!
test11
	
	| portfolio account1 account2 deposit1 deposit2 portfolioToAdd withdraw |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd _ Portfolio new.
	portfolio _ Portfolio new.
	
	deposit1 _ Deposit register: 10 on: account1.
	
	deposit2 _ Deposit register: 50 on: account2.
	withdraw _ Withdraw register: 20 on: account2.	
	
	portfolioToAdd addBankAccount: account1.	
	
	portfolio addBankAccount: portfolioToAdd.
	portfolio addBankAccount: account2.
	
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).
	self deny: (portfolioToAdd hasRegistered: deposit2).
! !

!methodRemoval: Portfolio #addXxx: stamp: 'AF 5/22/2022 19:00:42'!
addXxx: aXxx
	
	| roots |
		
	roots _ self findRoots.
	roots do: [ :aRoot | aRoot assertAXxxIsNotDescendant: aXxx. ].
	
	xxxs add: aXxx.
	(aXxx isKindOf: Portfolio) ifTrue: [aXxx markAsParent: self]!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:01:03' prior: 50474861!
addBankAccount: aBankAccount
	
	| roots |
		
	roots _ self findRoots.
	roots do: [ :aRoot | aRoot assertAXxxIsNotDescendant: aBankAccount. ].
	
	xxxs add: aBankAccount.
	(aBankAccount isKindOf: Portfolio) ifTrue: [aBankAccount markAsParent: self]! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AF 5/22/2022 19:01:15'!
BankAccount subclass: #Portfolio
	instanceVariableNames: 'bankAccounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:01:15' prior: 50474638!
assertAXxxIsNotDescendant: aXxx	
		
	(aXxx = self) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription].
	
	bankAccounts do: [ :xxx | 		
		(xxx = aXxx) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription] .
		(xxx isKindOf: Portfolio) ifTrue: [ xxx assertAXxxIsNotDescendant: aXxx ].
	].
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:01:15' prior: 50474763 overrides: 50474852!
addTransactionsTo: aCollectionOfTransactions

	bankAccounts do: [ :aXxx | aXxx addTransactionsTo: aCollectionOfTransactions].
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:01:15' prior: 50475158!
addBankAccount: aBankAccount
	
	| roots |
		
	roots _ self findRoots.
	roots do: [ :aRoot | aRoot assertAXxxIsNotDescendant: aBankAccount. ].
	
	bankAccounts add: aBankAccount.
	(aBankAccount isKindOf: Portfolio) ifTrue: [aBankAccount markAsParent: self]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:01:15' prior: 50474670 overrides: 50474601!
initialize

	bankAccounts _ Set new.
	parents _ OrderedCollection new.	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:01:15' prior: 50474663 overrides: 50474596!
hasRegistered: aTransaction 
	
	^bankAccounts anySatisfy: [ :aXxx | aXxx hasRegistered: aTransaction].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:01:15' prior: 50474651 overrides: 50474592!
balance
	
	| balance |
	
	balance _ 0.

	bankAccounts do: [ :xxx | balance _ xxx balance + balance].
	
	^balance! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:01:23' prior: 50475191 overrides: 50474852!
addTransactionsTo: aCollectionOfTransactions

	bankAccounts do: [ :aBankAccount | aBankAccount addTransactionsTo: aCollectionOfTransactions].
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:01:32' prior: 50475177!
assertAXxxIsNotDescendant: aBankAccount	
		
	(aBankAccount = self) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription].
	
	bankAccounts do: [ :xxx | 		
		(xxx = aBankAccount) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription] .
		(xxx isKindOf: Portfolio) ifTrue: [ xxx assertAXxxIsNotDescendant: aBankAccount ].
	].
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:02:02'!
assertABankAccountIsNotDescendant: aBankAccount	
		
	(aBankAccount = self) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription].
	
	bankAccounts do: [ :xxx | 		
		(xxx = aBankAccount) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription] .
		(xxx isKindOf: Portfolio) ifTrue: [ xxx assertAXxxIsNotDescendant: aBankAccount ].
	].
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:02:02' prior: 50475199!
addBankAccount: aBankAccount
	
	| roots |
		
	roots _ self findRoots.
	roots do: [ :aRoot | aRoot assertABankAccountIsNotDescendant: aBankAccount. ].
	
	bankAccounts add: aBankAccount.
	(aBankAccount isKindOf: Portfolio) ifTrue: [aBankAccount markAsParent: self]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:02:02' prior: 50475240!
assertAXxxIsNotDescendant: aBankAccount	
		
	(aBankAccount = self) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription].
	
	bankAccounts do: [ :xxx | 		
		(xxx = aBankAccount) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription] .
		(xxx isKindOf: Portfolio) ifTrue: [ xxx assertABankAccountIsNotDescendant: aBankAccount ].
	].
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:02:02' prior: 50475254!
assertABankAccountIsNotDescendant: aBankAccount	
		
	(aBankAccount = self) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription].
	
	bankAccounts do: [ :xxx | 		
		(xxx = aBankAccount) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription] .
		(xxx isKindOf: Portfolio) ifTrue: [ xxx assertABankAccountIsNotDescendant: aBankAccount ].
	].
	
	
	! !

!methodRemoval: Portfolio #assertAXxxIsNotDescendant: stamp: 'AF 5/22/2022 19:02:02'!
assertAXxxIsNotDescendant: aBankAccount	
		
	(aBankAccount = self) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription].
	
	bankAccounts do: [ :xxx | 		
		(xxx = aBankAccount) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription] .
		(xxx isKindOf: Portfolio) ifTrue: [ xxx assertABankAccountIsNotDescendant: aBankAccount ].
	].
	
	
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:03:21' prior: 50475296!
assertABankAccountIsNotDescendant: aBankAccount	
		
	(aBankAccount = self) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription].
	
	bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio xxxIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendant: aBankAccount ].
	].
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:03:55' prior: 50475224 overrides: 50474592!
balance
	
	| balance |
	
	balance _ 0.

	bankAccounts do: [ :aRegisteredBankAccount | balance _ aRegisteredBankAccount balance + balance].
	
	^balance! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:04:20' prior: 50474657!
findRoots

	| roots |
	roots _ Set new.
	self addRootsTo: roots.
	^roots! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:04:38' prior: 50475217 overrides: 50474596!
hasRegistered: aTransaction 
	
	^bankAccounts anySatisfy: [ :aRegisteredBankAccount | aRegisteredBankAccount hasRegistered: aTransaction].! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:05:22'!
bankAccountIsAlreadyAddedErrorDescription

	'xxx is already added in portfolio'! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:05:22' prior: 50474986!
test17

	| portfolio portfolioGrandParent portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.	
	portfolioGrandParent _ Portfolio new.
	
	portfolioGrandParent addBankAccount: portfolioParent.
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolio addBankAccount: portfolioGrandParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:05:22' prior: 50474968!
test13

	| account portfolio portfolioParent |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.	
	portfolioParent _ Portfolio new.
	
	portfolio addBankAccount: account.
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolioParent addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:05:22' prior: 50475041!
test14

	| account portfolioParent portfolio |
	
	account _ ReceptiveAccount new.	
	portfolioParent _ Portfolio new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolioParent addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:05:22' prior: 50474953!
test12

	| account portfolio |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:05:22' prior: 50474871!
test15

	| portfolio portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolio addBankAccount: portfolioParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:05:22' prior: 50475325!
assertABankAccountIsNotDescendant: aBankAccount	
		
	(aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription].
	
	bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendant: aBankAccount ].
	].
	
	
	! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:05:22' prior: 50474902!
test18

	| account portfolio portfolioParent1 portfolioParent2 |
	
	account _ ReceptiveAccount new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	portfolio _ Portfolio new.
		
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: account.	
	
	self should: [ portfolio addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:05:22' prior: 50474934!
test16

	| portfolio portfolioParent1 portfolioParent2 |
	
	portfolio _ Portfolio new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.	
	
	self should: [ portfolio addBankAccount: portfolioParent1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: Portfolio class #xxxIsAlreadyAddedErrorDescription stamp: 'AF 5/22/2022 19:05:22'!
xxxIsAlreadyAddedErrorDescription

	'xxx is already added in portfolio'!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:05:31' prior: 50475365!
bankAccountIsAlreadyAddedErrorDescription

	'bank account is already added in portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:05:32' prior: 50475521!
bankAccountIsAlreadyAddedErrorDescription

	'bank account is already added in portfolio'! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:07:12'!
test01AnEmptyPortfolioShouldHaveZeroBalance

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: 0 equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test01 stamp: 'AF 5/22/2022 19:07:12'!
test01

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: 0 equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:09:19'!
test02APortfolioWithAnAccount

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolio addBankAccount: account.
	
	self assert: 100 equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test02 stamp: 'AF 5/22/2022 19:09:19'!
test02

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolio addBankAccount: account.
	
	self assert: 100 equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:10:29'!
test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolio addBankAccount: account.
	
	self assert: 100 equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test02APortfolioWithAnAccount stamp: 'AF 5/22/2022 19:10:29'!
test02APortfolioWithAnAccount

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolio addBankAccount: account.
	
	self assert: 100 equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:10:36' prior: 50475566!
test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolio addBankAccount: account.
	
	self assert: account balance equals: portfolio balance
	
! !

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test03 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'AF 5/22/2022 19:10:37'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:11:10'!
test03BalanceOfPortfoliWithPortfolios

	| portfolio account portfolioToAdd |
	
	account _ ReceptiveAccount new.	
	portfolioToAdd _ Portfolio new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolioToAdd addBankAccount: account.
	portfolio addBankAccount: portfolioToAdd.
	
	self assert: 100 equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test03 stamp: 'AF 5/22/2022 19:11:10'!
test03

	| portfolio account portfolioToAdd |
	
	account _ ReceptiveAccount new.	
	portfolioToAdd _ Portfolio new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolioToAdd addBankAccount: account.
	portfolio addBankAccount: portfolioToAdd.
	
	self assert: 100 equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:11:39'!
test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance

	| portfolio account portfolioToAdd |
	
	account _ ReceptiveAccount new.	
	portfolioToAdd _ Portfolio new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolioToAdd addBankAccount: account.
	portfolio addBankAccount: portfolioToAdd.
	
	self assert: 100 equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test03BalanceOfPortfoliWithPortfolios stamp: 'AF 5/22/2022 19:11:39'!
test03BalanceOfPortfoliWithPortfolios

	| portfolio account portfolioToAdd |
	
	account _ ReceptiveAccount new.	
	portfolioToAdd _ Portfolio new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolioToAdd addBankAccount: account.
	portfolio addBankAccount: portfolioToAdd.
	
	self assert: 100 equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:11:46' prior: 50475676!
test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance

	| portfolio account portfolioToAdd |
	
	account _ ReceptiveAccount new.	
	portfolioToAdd _ Portfolio new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account.
	
	portfolioToAdd addBankAccount: account.
	portfolio addBankAccount: portfolioToAdd.
	
	self assert: portfolioToAdd balance equals: portfolio balance
	
! !

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test04 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'AF 5/22/2022 19:11:46'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:12:15'!
test04BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 125 equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test04 stamp: 'AF 5/22/2022 19:12:15'!
test04

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 125 equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:12:30'!
test04BalanceOfPortfolioWithPortfoliosShouldBeTheSumOfInnerPortfolios

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 125 equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test04BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 19:12:30'!
test04BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 125 equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:12:43'!
test04BalanceOfPortfolioWithPortfoliosShouldBeTheSumOfInnerPortfoliosBalances

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 125 equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test04BalanceOfPortfolioWithPortfoliosShouldBeTheSumOfInnerPortfolios stamp: 'AF 5/22/2022 19:12:43'!
test04BalanceOfPortfolioWithPortfoliosShouldBeTheSumOfInnerPortfolios

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 125 equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:13:34' prior: 50475839!
test04BalanceOfPortfolioWithPortfoliosShouldBeTheSumOfInnerPortfoliosBalances

	| portfolio account1 account2 expectedBalance |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	expectedBalance _ account1 balance + account2 balance
	
	self assert: expectedBalance equals: portfolio balance
	
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:13:43' prior: 50475875!
test04BalanceOfPortfolioWithPortfoliosShouldBeTheSumOfInnerPortfoliosBalances

	| portfolio account1 account2 expectedBalance |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	expectedBalance _ account1 balance + account2 balance.
	
	self assert: expectedBalance equals: portfolio balance
	
! !

!testRun: #PortfolioTests #test04BalanceOfPortfolioWithPortfoliosShouldBeTheSumOfInnerPortfoliosBalances stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test04BalanceOfPortfolioWithPortfoliosShouldBeTheSumOfInnerPortfoliosBalances stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test05 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test06 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test07 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test08 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test10 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test12 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'AF 5/22/2022 19:13:44'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:13:53' prior: 50475895!
test04BalanceOfPortfolioWithPortfoliosShouldBeTheSumOfInnerPortfoliosBalances

	| portfolio account1 account2 expectedBalance |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	expectedBalance _ account1 balance + account2 balance.
	
	self assert: expectedBalance equals: portfolio balance
	
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:14:35'!
test04BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances

	| portfolio account1 account2 expectedBalance |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	expectedBalance _ account1 balance + account2 balance.
	
	self assert: expectedBalance equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test04BalanceOfPortfolioWithPortfoliosShouldBeTheSumOfInnerPortfoliosBalances stamp: 'AF 5/22/2022 19:14:35'!
test04BalanceOfPortfolioWithPortfoliosShouldBeTheSumOfInnerPortfoliosBalances

	| portfolio account1 account2 expectedBalance |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	expectedBalance _ account1 balance + account2 balance.
	
	self assert: expectedBalance equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:15:03'!
test05BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance

	| portfolio account1 account2 portfolioToAdd1 portfolioToAdd2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd1 _ Portfolio new.
	portfolioToAdd2 _ Portfolio new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.	
	
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.	
	
	portfolioToAdd1 addBankAccount: account1.	
	portfolioToAdd2 addBankAccount: account2.	
	
	portfolio addBankAccount: portfolioToAdd1.
	portfolio addBankAccount: portfolioToAdd2.
	
	self assert: 150 equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test05 stamp: 'AF 5/22/2022 19:15:03'!
test05

	| portfolio account1 account2 portfolioToAdd1 portfolioToAdd2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd1 _ Portfolio new.
	portfolioToAdd2 _ Portfolio new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.	
	
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.	
	
	portfolioToAdd1 addBankAccount: account1.	
	portfolioToAdd2 addBankAccount: account2.	
	
	portfolio addBankAccount: portfolioToAdd1.
	portfolio addBankAccount: portfolioToAdd2.
	
	self assert: 150 equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:15:29'!
test05BalanceOfPortfolioWithPortfolioShouldBeTheSumOFInnerPortfoliosBalances

	| portfolio account1 account2 portfolioToAdd1 portfolioToAdd2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd1 _ Portfolio new.
	portfolioToAdd2 _ Portfolio new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.	
	
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.	
	
	portfolioToAdd1 addBankAccount: account1.	
	portfolioToAdd2 addBankAccount: account2.	
	
	portfolio addBankAccount: portfolioToAdd1.
	portfolio addBankAccount: portfolioToAdd2.
	
	self assert: 150 equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test05BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 19:15:29'!
test05BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance

	| portfolio account1 account2 portfolioToAdd1 portfolioToAdd2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd1 _ Portfolio new.
	portfolioToAdd2 _ Portfolio new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.	
	
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.	
	
	portfolioToAdd1 addBankAccount: account1.	
	portfolioToAdd2 addBankAccount: account2.	
	
	portfolio addBankAccount: portfolioToAdd1.
	portfolio addBankAccount: portfolioToAdd2.
	
	self assert: 150 equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:16:02'!
test06anEmptyPorfolioShou

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions isEmpty
	
! !

!methodRemoval: PortfolioTests #test06 stamp: 'AF 5/22/2022 19:16:02'!
test06

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions isEmpty
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:16:19'!
test06anEmptyPorfolioShouldNotHaveTransacctions

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions isEmpty
	
! !

!methodRemoval: PortfolioTests #test06anEmptyPorfolioShou stamp: 'AF 5/22/2022 19:16:19'!
test06anEmptyPorfolioShou

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions isEmpty
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:16:47'!
test072BalanceOfPortfolioWithAnAccountShouldBeAccountBalance

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: 1 equals: portfolio transactions size.
	self assert: account transactions equals: portfolio transactions 
	
! !

!methodRemoval: PortfolioTests #test07 stamp: 'AF 5/22/2022 19:16:47'!
test07

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: 1 equals: portfolio transactions size.
	self assert: account transactions equals: portfolio transactions 
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:17:20'!
test07TransacctionsOfPortfolioWithAnAccountShouldBeAccountTransacctions

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: 1 equals: portfolio transactions size.
	self assert: account transactions equals: portfolio transactions 
	
! !

!methodRemoval: PortfolioTests #test072BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 19:17:20'!
test072BalanceOfPortfolioWithAnAccountShouldBeAccountBalance

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: 1 equals: portfolio transactions size.
	self assert: account transactions equals: portfolio transactions 
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:17:45'!
test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: 1 equals: portfolio transactions size.
	self assert: account transactions equals: portfolio transactions 
	
! !

!methodRemoval: PortfolioTests #test07TransacctionsOfPortfolioWithAnAccountShouldBeAccountTransacctions stamp: 'AF 5/22/2022 19:17:45'!
test07TransacctionsOfPortfolioWithAnAccountShouldBeAccountTransacctions

	| portfolio account |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: 1 equals: portfolio transactions size.
	self assert: account transactions equals: portfolio transactions 
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:17:59'!
test06anEmptyPorfolioShouldNotHaveTransactions

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions isEmpty
	
! !

!methodRemoval: PortfolioTests #test06anEmptyPorfolioShouldNotHaveTransacctions stamp: 'AF 5/22/2022 19:17:59'!
test06anEmptyPorfolioShouldNotHaveTransacctions

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions isEmpty
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:18:43'!
test08TransacctionsOFPortfolioWithAccountsShould

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1. 
	
	Deposit register: 50 on: account2.
	Withdraw register: 10 on: account2.
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 3 equals: portfolio transactions size.
	self assert: (account1 transactions, account2 transactions) asSet equals: portfolio transactions asSet.
	
! !

!methodRemoval: PortfolioTests #test08 stamp: 'AF 5/22/2022 19:18:43'!
test08

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1. 
	
	Deposit register: 50 on: account2.
	Withdraw register: 10 on: account2.
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 3 equals: portfolio transactions size.
	self assert: (account1 transactions, account2 transactions) asSet equals: portfolio transactions asSet.
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:19:30'!
test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1. 
	
	Deposit register: 50 on: account2.
	Withdraw register: 10 on: account2.
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 3 equals: portfolio transactions size.
	self assert: (account1 transactions, account2 transactions) asSet equals: portfolio transactions asSet.
	
! !

!methodRemoval: PortfolioTests #test08TransacctionsOFPortfolioWithAccountsShould stamp: 'AF 5/22/2022 19:19:30'!
test08TransacctionsOFPortfolioWithAccountsShould

	| portfolio account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1. 
	
	Deposit register: 50 on: account2.
	Withdraw register: 10 on: account2.
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	self assert: 3 equals: portfolio transactions size.
	self assert: (account1 transactions, account2 transactions) asSet equals: portfolio transactions asSet.
	
!
!Behavior method!
initialize
	(bankAccounts _ [
	(Set
		cover: (29 to: 31)
		declaredAt: (29 to: 31)) new ] valueCoveringAll:
		{33 to: 35})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).
	(parents _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (39 to: 45)
		declaredAt: (39 to: 45).! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{37 to: 37})
		cover: (27 to: 33)
		declaredAt: (14 to: 20).
	[
	(bankAccounts
		cover: (42 to: 53)
		declaredAt: (42 to: 53)) do: [ :aRegisteredBankAccount |
		(balance _ [
		([
		(aRegisteredBankAccount
			cover: (97 to: 118)
			declaredAt: (62 to: 83)) balance ] valueCoveringAll:
			{120 to: 126}) +
			(balance
				cover: (87 to: 93)
				declaredAt: (14 to: 20)) ] valueCoveringAll:
			{128 to: 128})
			cover: (130 to: 136)
			declaredAt: (14 to: 20) ]] valueCoveringAll:
		{55 to: 57}.
	^ balance
		cover: (144 to: 150)
		declaredAt: (14 to: 20).! !

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 19:21:44'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addBankAccount: aBankAccount
	| roots |
	(roots _ [
	(self coverAll:
		{55 to: 58}) findRoots ] valueCoveringAll:
		{60 to: 68})
		cover: (47 to: 51)
		declaredAt: (35 to: 39).
	[
	(roots
		cover: (72 to: 76)
		declaredAt: (35 to: 39)) do: [ :aRoot |
		[
		(aRoot
			cover: (93 to: 97)
			declaredAt: (85 to: 89)) assertABankAccountIsNotDescendant:
			(aBankAccount
				cover: (134 to: 145)
				declaredAt: (17 to: 28)) ] valueCoveringAll:
			{99 to: 132} ]] valueCoveringAll:
		{78 to: 80}.
	[
	(bankAccounts
		cover: (154 to: 165)
		declaredAt: (154 to: 165)) add:
		(aBankAccount
			cover: (172 to: 183)
			declaredAt: (17 to: 28)) ] valueCoveringAll:
		{167 to: 170}.
	[
	([
	(aBankAccount
		cover: (188 to: 199)
		declaredAt: (17 to: 28)) isKindOf:
		(Portfolio
			cover: (211 to: 219)
			declaredAt: (211 to: 219)) ] valueCoveringAll:
		{201 to: 209}) ifTrue: [
		[
		(aBankAccount
			cover: (231 to: 242)
			declaredAt: (17 to: 28)) markAsParent:
			(self coverAll:
				{258 to: 261}) ] valueCoveringAll:
			{244 to: 256} ]] valueCoveringAll:
		{222 to: 228}.! !
!Behavior method!
findRoots
	| roots |
	(roots _ [
	(Set
		cover: (32 to: 34)
		declaredAt: (32 to: 34)) new ] valueCoveringAll:
		{36 to: 38})
		cover: (24 to: 28)
		declaredAt: (15 to: 19).
	[
	(self coverAll:
		{42 to: 45}) addRootsTo:
		(roots
			cover: (59 to: 63)
			declaredAt: (15 to: 19)) ] valueCoveringAll:
		{47 to: 57}.
	^ roots
		cover: (68 to: 72)
		declaredAt: (15 to: 19).! !
!Behavior method!
addRootsTo: aSetOfRoots
	[
	([
	(self coverAll:
		{28 to: 31}) isRoot ] valueCoveringAll:
		{33 to: 38})
		ifTrue: [
			[
			(aSetOfRoots
				cover: (53 to: 63)
				declaredAt: (13 to: 23)) add:
				(self coverAll:
					{70 to: 73}) ] valueCoveringAll:
				{65 to: 68} ]
		ifFalse: [
			[
			(parents
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) do: [ :aParent |
				[
				(aParent
					cover: (115 to: 121)
					declaredAt: (105 to: 111)) addRootsTo:
					(aSetOfRoots
						cover: (135 to: 145)
						declaredAt: (13 to: 23)) ] valueCoveringAll:
					{123 to: 133} ]] valueCoveringAll:
				{98 to: 100} ]] valueCoveringAll:
		{44 to: 50. 79 to: 86}.! !
!Behavior method!
isRoot
	^ [
	(parents
		cover: (12 to: 18)
		declaredAt: (12 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
assertABankAccountIsNotDescendant: aBankAccount
	[
	([
	(aBankAccount
		cover: (55 to: 66)
		declaredAt: (36 to: 47)) =
		(self coverAll:
			{70 to: 73}) ] valueCoveringAll:
		{68 to: 68}) ifTrue: [
		[
		(self coverAll:
			{85 to: 88}) error:
			([
			(Portfolio
				cover: (97 to: 105)
				declaredAt: (97 to: 105)) bankAccountIsAlreadyAddedErrorDescription ] valueCoveringAll:
				{107 to: 147}) ] valueCoveringAll:
			{90 to: 95} ]] valueCoveringAll:
		{76 to: 82}.
	[
	(bankAccounts
		cover: (154 to: 165)
		declaredAt: (154 to: 165)) do: [ :aRegisteredBankAccount |
		[
		([
		(aRegisteredBankAccount
			cover: (205 to: 226)
			declaredAt: (174 to: 195)) =
			(aBankAccount
				cover: (230 to: 241)
				declaredAt: (36 to: 47)) ] valueCoveringAll:
			{228 to: 228}) ifTrue: [
			[
			(self coverAll:
				{253 to: 256}) error:
				([
				(Portfolio
					cover: (265 to: 273)
					declaredAt: (97 to: 105)) bankAccountIsAlreadyAddedErrorDescription ] valueCoveringAll:
					{275 to: 315}) ] valueCoveringAll:
				{258 to: 263} ]] valueCoveringAll:
			{244 to: 250}.
		[
		([
		(aRegisteredBankAccount
			cover: (323 to: 344)
			declaredAt: (174 to: 195)) isKindOf:
			(Portfolio
				cover: (356 to: 364)
				declaredAt: (97 to: 105)) ] valueCoveringAll:
			{346 to: 354}) ifTrue: [
			[
			(aRegisteredBankAccount
				cover: (377 to: 398)
				declaredAt: (174 to: 195)) assertABankAccountIsNotDescendant:
				(aBankAccount
					cover: (435 to: 446)
					declaredAt: (36 to: 47)) ] valueCoveringAll:
				{400 to: 433} ]] valueCoveringAll:
			{367 to: 373} ]] valueCoveringAll:
		{167 to: 169}.! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{34 to: 34})
		cover: (24 to: 30)
		declaredAt: (13 to: 19).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(balance _ [
		(aTransaction
			cover: (83 to: 94)
			declaredAt: (58 to: 69)) addTo:
			(balance
				cover: (73 to: 79)
				declaredAt: (13 to: 19)) ] valueCoveringAll:
			{96 to: 101})
			cover: (103 to: 109)
			declaredAt: (13 to: 19) ]] valueCoveringAll:
		{51 to: 53}.
	^ balance
		cover: (119 to: 125)
		declaredAt: (13 to: 19).! !
!Behavior method!
addTo: aBalanceBeingCalculated
	^ [
	(aBalanceBeingCalculated
		cover: (37 to: 59)
		declaredAt: (8 to: 30)) +
		([
		(self coverAll:
			{63 to: 66}) value ] valueCoveringAll:
			{68 to: 72}) ] valueCoveringAll:
		{61 to: 61}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 19:21:44'!
PASSED!
!Behavior method!
markAsParent: aPortfolio
	[
	(parents
		cover: (28 to: 34)
		declaredAt: (28 to: 34)) add:
		(aPortfolio
			cover: (41 to: 50)
			declaredAt: (15 to: 24)) ] valueCoveringAll:
		{36 to: 39}.! !

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 19:21:44'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
addTo: aBalanceBeingCalculated
	^ [
	(aBalanceBeingCalculated
		cover: (37 to: 59)
		declaredAt: (8 to: 30)) -
		([
		(self coverAll:
			{63 to: 66}) value ] valueCoveringAll:
			{68 to: 72}) ] valueCoveringAll:
		{61 to: 61}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTests #test04BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 19:21:44'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithPortfolioShouldBeTheSumOFInnerPortfoliosBalances stamp: 'AF 5/22/2022 19:21:44'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	(self coverAll:
		{75 to: 78}) addTransactionsTo:
		(transactions
			cover: (99 to: 110)
			declaredAt: (18 to: 29)) ] valueCoveringAll:
		{80 to: 97}.
	^ transactions
		cover: (117 to: 128)
		declaredAt: (18 to: 29).! !
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(bankAccounts
		cover: (48 to: 59)
		declaredAt: (48 to: 59)) do: [ :aBankAccount |
		[
		(aBankAccount
			cover: (83 to: 94)
			declaredAt: (68 to: 79)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (115 to: 139)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{96 to: 113} ]] valueCoveringAll:
		{61 to: 63}.! !

!testRun: #PortfolioTests #test06anEmptyPorfolioShouldNotHaveTransactions stamp: 'AF 5/22/2022 19:21:44'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 19:21:44'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 19:21:44'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'AF 5/22/2022 19:21:44'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(bankAccounts
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) anySatisfy: [ :aRegisteredBankAccount |
		[
		(aRegisteredBankAccount
			cover: (87 to: 108)
			declaredAt: (62 to: 83)) hasRegistered:
			(aTransaction
				cover: (125 to: 136)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{110 to: 123} ]] valueCoveringAll:
		{47 to: 57}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTests #test10 stamp: 'AF 5/22/2022 19:21:44'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'AF 5/22/2022 19:21:44'!
PASSED!
!Behavior method!
bankAccountIsAlreadyAddedErrorDescription
	'bank account is already added in portfolio' coverAll:
		{45 to: 88}.! !

!testRun: #PortfolioTests #test12 stamp: 'AF 5/22/2022 19:21:44'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'AF 5/22/2022 19:21:44'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'AF 5/22/2022 19:21:44'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'AF 5/22/2022 19:21:44'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'AF 5/22/2022 19:21:44'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'AF 5/22/2022 19:21:44'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'AF 5/22/2022 19:21:44'!
PASSED!
!Behavior method!
initialize
	(bankAccounts _ [
	(Set
		cover: (29 to: 31)
		declaredAt: (29 to: 31)) new ] valueCoveringAll:
		{33 to: 35})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).
	(parents _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (39 to: 45)
		declaredAt: (39 to: 45).! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{37 to: 37})
		cover: (27 to: 33)
		declaredAt: (14 to: 20).
	[
	(bankAccounts
		cover: (42 to: 53)
		declaredAt: (42 to: 53)) do: [ :aRegisteredBankAccount |
		(balance _ [
		([
		(aRegisteredBankAccount
			cover: (97 to: 118)
			declaredAt: (62 to: 83)) balance ] valueCoveringAll:
			{120 to: 126}) +
			(balance
				cover: (87 to: 93)
				declaredAt: (14 to: 20)) ] valueCoveringAll:
			{128 to: 128})
			cover: (130 to: 136)
			declaredAt: (14 to: 20) ]] valueCoveringAll:
		{55 to: 57}.
	^ balance
		cover: (144 to: 150)
		declaredAt: (14 to: 20).! !

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 19:22:41'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addBankAccount: aBankAccount
	| roots |
	(roots _ [
	(self coverAll:
		{55 to: 58}) findRoots ] valueCoveringAll:
		{60 to: 68})
		cover: (47 to: 51)
		declaredAt: (35 to: 39).
	[
	(roots
		cover: (72 to: 76)
		declaredAt: (35 to: 39)) do: [ :aRoot |
		[
		(aRoot
			cover: (93 to: 97)
			declaredAt: (85 to: 89)) assertABankAccountIsNotDescendant:
			(aBankAccount
				cover: (134 to: 145)
				declaredAt: (17 to: 28)) ] valueCoveringAll:
			{99 to: 132} ]] valueCoveringAll:
		{78 to: 80}.
	[
	(bankAccounts
		cover: (154 to: 165)
		declaredAt: (154 to: 165)) add:
		(aBankAccount
			cover: (172 to: 183)
			declaredAt: (17 to: 28)) ] valueCoveringAll:
		{167 to: 170}.
	[
	([
	(aBankAccount
		cover: (188 to: 199)
		declaredAt: (17 to: 28)) isKindOf:
		(Portfolio
			cover: (211 to: 219)
			declaredAt: (211 to: 219)) ] valueCoveringAll:
		{201 to: 209}) ifTrue: [
		[
		(aBankAccount
			cover: (231 to: 242)
			declaredAt: (17 to: 28)) markAsParent:
			(self coverAll:
				{258 to: 261}) ] valueCoveringAll:
			{244 to: 256} ]] valueCoveringAll:
		{222 to: 228}.! !
!Behavior method!
findRoots
	| roots |
	(roots _ [
	(Set
		cover: (32 to: 34)
		declaredAt: (32 to: 34)) new ] valueCoveringAll:
		{36 to: 38})
		cover: (24 to: 28)
		declaredAt: (15 to: 19).
	[
	(self coverAll:
		{42 to: 45}) addRootsTo:
		(roots
			cover: (59 to: 63)
			declaredAt: (15 to: 19)) ] valueCoveringAll:
		{47 to: 57}.
	^ roots
		cover: (68 to: 72)
		declaredAt: (15 to: 19).! !
!Behavior method!
addRootsTo: aSetOfRoots
	[
	([
	(self coverAll:
		{28 to: 31}) isRoot ] valueCoveringAll:
		{33 to: 38})
		ifTrue: [
			[
			(aSetOfRoots
				cover: (53 to: 63)
				declaredAt: (13 to: 23)) add:
				(self coverAll:
					{70 to: 73}) ] valueCoveringAll:
				{65 to: 68} ]
		ifFalse: [
			[
			(parents
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) do: [ :aParent |
				[
				(aParent
					cover: (115 to: 121)
					declaredAt: (105 to: 111)) addRootsTo:
					(aSetOfRoots
						cover: (135 to: 145)
						declaredAt: (13 to: 23)) ] valueCoveringAll:
					{123 to: 133} ]] valueCoveringAll:
				{98 to: 100} ]] valueCoveringAll:
		{44 to: 50. 79 to: 86}.! !
!Behavior method!
isRoot
	^ [
	(parents
		cover: (12 to: 18)
		declaredAt: (12 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
assertABankAccountIsNotDescendant: aBankAccount
	[
	([
	(aBankAccount
		cover: (55 to: 66)
		declaredAt: (36 to: 47)) =
		(self coverAll:
			{70 to: 73}) ] valueCoveringAll:
		{68 to: 68}) ifTrue: [
		[
		(self coverAll:
			{85 to: 88}) error:
			([
			(Portfolio
				cover: (97 to: 105)
				declaredAt: (97 to: 105)) bankAccountIsAlreadyAddedErrorDescription ] valueCoveringAll:
				{107 to: 147}) ] valueCoveringAll:
			{90 to: 95} ]] valueCoveringAll:
		{76 to: 82}.
	[
	(bankAccounts
		cover: (154 to: 165)
		declaredAt: (154 to: 165)) do: [ :aRegisteredBankAccount |
		[
		([
		(aRegisteredBankAccount
			cover: (205 to: 226)
			declaredAt: (174 to: 195)) =
			(aBankAccount
				cover: (230 to: 241)
				declaredAt: (36 to: 47)) ] valueCoveringAll:
			{228 to: 228}) ifTrue: [
			[
			(self coverAll:
				{253 to: 256}) error:
				([
				(Portfolio
					cover: (265 to: 273)
					declaredAt: (97 to: 105)) bankAccountIsAlreadyAddedErrorDescription ] valueCoveringAll:
					{275 to: 315}) ] valueCoveringAll:
				{258 to: 263} ]] valueCoveringAll:
			{244 to: 250}.
		[
		([
		(aRegisteredBankAccount
			cover: (323 to: 344)
			declaredAt: (174 to: 195)) isKindOf:
			(Portfolio
				cover: (356 to: 364)
				declaredAt: (97 to: 105)) ] valueCoveringAll:
			{346 to: 354}) ifTrue: [
			[
			(aRegisteredBankAccount
				cover: (377 to: 398)
				declaredAt: (174 to: 195)) assertABankAccountIsNotDescendant:
				(aBankAccount
					cover: (435 to: 446)
					declaredAt: (36 to: 47)) ] valueCoveringAll:
				{400 to: 433} ]] valueCoveringAll:
			{367 to: 373} ]] valueCoveringAll:
		{167 to: 169}.! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{34 to: 34})
		cover: (24 to: 30)
		declaredAt: (13 to: 19).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(balance _ [
		(aTransaction
			cover: (83 to: 94)
			declaredAt: (58 to: 69)) addTo:
			(balance
				cover: (73 to: 79)
				declaredAt: (13 to: 19)) ] valueCoveringAll:
			{96 to: 101})
			cover: (103 to: 109)
			declaredAt: (13 to: 19) ]] valueCoveringAll:
		{51 to: 53}.
	^ balance
		cover: (119 to: 125)
		declaredAt: (13 to: 19).! !
!Behavior method!
addTo: aBalanceBeingCalculated
	^ [
	(aBalanceBeingCalculated
		cover: (37 to: 59)
		declaredAt: (8 to: 30)) +
		([
		(self coverAll:
			{63 to: 66}) value ] valueCoveringAll:
			{68 to: 72}) ] valueCoveringAll:
		{61 to: 61}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 19:22:41'!
PASSED!
!Behavior method!
markAsParent: aPortfolio
	[
	(parents
		cover: (28 to: 34)
		declaredAt: (28 to: 34)) add:
		(aPortfolio
			cover: (41 to: 50)
			declaredAt: (15 to: 24)) ] valueCoveringAll:
		{36 to: 39}.! !

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 19:22:41'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
addTo: aBalanceBeingCalculated
	^ [
	(aBalanceBeingCalculated
		cover: (37 to: 59)
		declaredAt: (8 to: 30)) -
		([
		(self coverAll:
			{63 to: 66}) value ] valueCoveringAll:
			{68 to: 72}) ] valueCoveringAll:
		{61 to: 61}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTests #test04BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 19:22:41'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithPortfolioShouldBeTheSumOFInnerPortfoliosBalances stamp: 'AF 5/22/2022 19:22:41'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	(self coverAll:
		{75 to: 78}) addTransactionsTo:
		(transactions
			cover: (99 to: 110)
			declaredAt: (18 to: 29)) ] valueCoveringAll:
		{80 to: 97}.
	^ transactions
		cover: (117 to: 128)
		declaredAt: (18 to: 29).! !
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(bankAccounts
		cover: (48 to: 59)
		declaredAt: (48 to: 59)) do: [ :aBankAccount |
		[
		(aBankAccount
			cover: (83 to: 94)
			declaredAt: (68 to: 79)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (115 to: 139)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{96 to: 113} ]] valueCoveringAll:
		{61 to: 63}.! !

!testRun: #PortfolioTests #test06anEmptyPorfolioShouldNotHaveTransactions stamp: 'AF 5/22/2022 19:22:41'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 19:22:41'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 19:22:41'!
PASSED!

!testRun: #PortfolioTests #test09 stamp: 'AF 5/22/2022 19:22:41'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(bankAccounts
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) anySatisfy: [ :aRegisteredBankAccount |
		[
		(aRegisteredBankAccount
			cover: (87 to: 108)
			declaredAt: (62 to: 83)) hasRegistered:
			(aTransaction
				cover: (125 to: 136)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{110 to: 123} ]] valueCoveringAll:
		{47 to: 57}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTests #test10 stamp: 'AF 5/22/2022 19:22:41'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'AF 5/22/2022 19:22:41'!
PASSED!
!Behavior method!
bankAccountIsAlreadyAddedErrorDescription
	'bank account is already added in portfolio' coverAll:
		{45 to: 88}.! !

!testRun: #PortfolioTests #test12 stamp: 'AF 5/22/2022 19:22:41'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'AF 5/22/2022 19:22:41'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'AF 5/22/2022 19:22:41'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'AF 5/22/2022 19:22:41'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'AF 5/22/2022 19:22:41'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'AF 5/22/2022 19:22:41'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'AF 5/22/2022 19:22:41'!
PASSED!

!methodRemoval: PortfolioTests #test09 stamp: 'AF 5/22/2022 19:23:06'!
test09

	| portfolio portfolioToAdd account1 account2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd _ Portfolio new.
	portfolio _ Portfolio new.
	
	Deposit register: 10 on: account1. 
	
	Deposit register: 100 on: account2. 
	Withdraw register: 50 on: account2.	
	
	portfolioToAdd addBankAccount: account2.	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: portfolioToAdd. 
	
	self assert: 3 equals: portfolio transactions size.
	self assert: (account1 transactions, portfolioToAdd transactions) asSet equals: portfolio transactions asSet
!
!Behavior method!
initialize
	(bankAccounts _ [
	(Set
		cover: (29 to: 31)
		declaredAt: (29 to: 31)) new ] valueCoveringAll:
		{33 to: 35})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).
	(parents _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (39 to: 45)
		declaredAt: (39 to: 45).! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{37 to: 37})
		cover: (27 to: 33)
		declaredAt: (14 to: 20).
	[
	(bankAccounts
		cover: (42 to: 53)
		declaredAt: (42 to: 53)) do: [ :aRegisteredBankAccount |
		(balance _ [
		([
		(aRegisteredBankAccount
			cover: (97 to: 118)
			declaredAt: (62 to: 83)) balance ] valueCoveringAll:
			{120 to: 126}) +
			(balance
				cover: (87 to: 93)
				declaredAt: (14 to: 20)) ] valueCoveringAll:
			{128 to: 128})
			cover: (130 to: 136)
			declaredAt: (14 to: 20) ]] valueCoveringAll:
		{55 to: 57}.
	^ balance
		cover: (144 to: 150)
		declaredAt: (14 to: 20).! !

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 19:23:14'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addBankAccount: aBankAccount
	| roots |
	(roots _ [
	(self coverAll:
		{55 to: 58}) findRoots ] valueCoveringAll:
		{60 to: 68})
		cover: (47 to: 51)
		declaredAt: (35 to: 39).
	[
	(roots
		cover: (72 to: 76)
		declaredAt: (35 to: 39)) do: [ :aRoot |
		[
		(aRoot
			cover: (93 to: 97)
			declaredAt: (85 to: 89)) assertABankAccountIsNotDescendant:
			(aBankAccount
				cover: (134 to: 145)
				declaredAt: (17 to: 28)) ] valueCoveringAll:
			{99 to: 132} ]] valueCoveringAll:
		{78 to: 80}.
	[
	(bankAccounts
		cover: (154 to: 165)
		declaredAt: (154 to: 165)) add:
		(aBankAccount
			cover: (172 to: 183)
			declaredAt: (17 to: 28)) ] valueCoveringAll:
		{167 to: 170}.
	[
	([
	(aBankAccount
		cover: (188 to: 199)
		declaredAt: (17 to: 28)) isKindOf:
		(Portfolio
			cover: (211 to: 219)
			declaredAt: (211 to: 219)) ] valueCoveringAll:
		{201 to: 209}) ifTrue: [
		[
		(aBankAccount
			cover: (231 to: 242)
			declaredAt: (17 to: 28)) markAsParent:
			(self coverAll:
				{258 to: 261}) ] valueCoveringAll:
			{244 to: 256} ]] valueCoveringAll:
		{222 to: 228}.! !
!Behavior method!
findRoots
	| roots |
	(roots _ [
	(Set
		cover: (32 to: 34)
		declaredAt: (32 to: 34)) new ] valueCoveringAll:
		{36 to: 38})
		cover: (24 to: 28)
		declaredAt: (15 to: 19).
	[
	(self coverAll:
		{42 to: 45}) addRootsTo:
		(roots
			cover: (59 to: 63)
			declaredAt: (15 to: 19)) ] valueCoveringAll:
		{47 to: 57}.
	^ roots
		cover: (68 to: 72)
		declaredAt: (15 to: 19).! !
!Behavior method!
addRootsTo: aSetOfRoots
	[
	([
	(self coverAll:
		{28 to: 31}) isRoot ] valueCoveringAll:
		{33 to: 38})
		ifTrue: [
			[
			(aSetOfRoots
				cover: (53 to: 63)
				declaredAt: (13 to: 23)) add:
				(self coverAll:
					{70 to: 73}) ] valueCoveringAll:
				{65 to: 68} ]
		ifFalse: [
			[
			(parents
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) do: [ :aParent |
				[
				(aParent
					cover: (115 to: 121)
					declaredAt: (105 to: 111)) addRootsTo:
					(aSetOfRoots
						cover: (135 to: 145)
						declaredAt: (13 to: 23)) ] valueCoveringAll:
					{123 to: 133} ]] valueCoveringAll:
				{98 to: 100} ]] valueCoveringAll:
		{44 to: 50. 79 to: 86}.! !
!Behavior method!
isRoot
	^ [
	(parents
		cover: (12 to: 18)
		declaredAt: (12 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
assertABankAccountIsNotDescendant: aBankAccount
	[
	([
	(aBankAccount
		cover: (55 to: 66)
		declaredAt: (36 to: 47)) =
		(self coverAll:
			{70 to: 73}) ] valueCoveringAll:
		{68 to: 68}) ifTrue: [
		[
		(self coverAll:
			{85 to: 88}) error:
			([
			(Portfolio
				cover: (97 to: 105)
				declaredAt: (97 to: 105)) bankAccountIsAlreadyAddedErrorDescription ] valueCoveringAll:
				{107 to: 147}) ] valueCoveringAll:
			{90 to: 95} ]] valueCoveringAll:
		{76 to: 82}.
	[
	(bankAccounts
		cover: (154 to: 165)
		declaredAt: (154 to: 165)) do: [ :aRegisteredBankAccount |
		[
		([
		(aRegisteredBankAccount
			cover: (205 to: 226)
			declaredAt: (174 to: 195)) =
			(aBankAccount
				cover: (230 to: 241)
				declaredAt: (36 to: 47)) ] valueCoveringAll:
			{228 to: 228}) ifTrue: [
			[
			(self coverAll:
				{253 to: 256}) error:
				([
				(Portfolio
					cover: (265 to: 273)
					declaredAt: (97 to: 105)) bankAccountIsAlreadyAddedErrorDescription ] valueCoveringAll:
					{275 to: 315}) ] valueCoveringAll:
				{258 to: 263} ]] valueCoveringAll:
			{244 to: 250}.
		[
		([
		(aRegisteredBankAccount
			cover: (323 to: 344)
			declaredAt: (174 to: 195)) isKindOf:
			(Portfolio
				cover: (356 to: 364)
				declaredAt: (97 to: 105)) ] valueCoveringAll:
			{346 to: 354}) ifTrue: [
			[
			(aRegisteredBankAccount
				cover: (377 to: 398)
				declaredAt: (174 to: 195)) assertABankAccountIsNotDescendant:
				(aBankAccount
					cover: (435 to: 446)
					declaredAt: (36 to: 47)) ] valueCoveringAll:
				{400 to: 433} ]] valueCoveringAll:
			{367 to: 373} ]] valueCoveringAll:
		{167 to: 169}.! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{34 to: 34})
		cover: (24 to: 30)
		declaredAt: (13 to: 19).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(balance _ [
		(aTransaction
			cover: (83 to: 94)
			declaredAt: (58 to: 69)) addTo:
			(balance
				cover: (73 to: 79)
				declaredAt: (13 to: 19)) ] valueCoveringAll:
			{96 to: 101})
			cover: (103 to: 109)
			declaredAt: (13 to: 19) ]] valueCoveringAll:
		{51 to: 53}.
	^ balance
		cover: (119 to: 125)
		declaredAt: (13 to: 19).! !
!Behavior method!
addTo: aBalanceBeingCalculated
	^ [
	(aBalanceBeingCalculated
		cover: (37 to: 59)
		declaredAt: (8 to: 30)) +
		([
		(self coverAll:
			{63 to: 66}) value ] valueCoveringAll:
			{68 to: 72}) ] valueCoveringAll:
		{61 to: 61}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 19:23:14'!
PASSED!
!Behavior method!
markAsParent: aPortfolio
	[
	(parents
		cover: (28 to: 34)
		declaredAt: (28 to: 34)) add:
		(aPortfolio
			cover: (41 to: 50)
			declaredAt: (15 to: 24)) ] valueCoveringAll:
		{36 to: 39}.! !

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 19:23:14'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
addTo: aBalanceBeingCalculated
	^ [
	(aBalanceBeingCalculated
		cover: (37 to: 59)
		declaredAt: (8 to: 30)) -
		([
		(self coverAll:
			{63 to: 66}) value ] valueCoveringAll:
			{68 to: 72}) ] valueCoveringAll:
		{61 to: 61}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTests #test04BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 19:23:14'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithPortfolioShouldBeTheSumOFInnerPortfoliosBalances stamp: 'AF 5/22/2022 19:23:14'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	(self coverAll:
		{75 to: 78}) addTransactionsTo:
		(transactions
			cover: (99 to: 110)
			declaredAt: (18 to: 29)) ] valueCoveringAll:
		{80 to: 97}.
	^ transactions
		cover: (117 to: 128)
		declaredAt: (18 to: 29).! !
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(bankAccounts
		cover: (48 to: 59)
		declaredAt: (48 to: 59)) do: [ :aBankAccount |
		[
		(aBankAccount
			cover: (83 to: 94)
			declaredAt: (68 to: 79)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (115 to: 139)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{96 to: 113} ]] valueCoveringAll:
		{61 to: 63}.! !

!testRun: #PortfolioTests #test06anEmptyPorfolioShouldNotHaveTransactions stamp: 'AF 5/22/2022 19:23:14'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 19:23:14'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 19:23:14'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(bankAccounts
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) anySatisfy: [ :aRegisteredBankAccount |
		[
		(aRegisteredBankAccount
			cover: (87 to: 108)
			declaredAt: (62 to: 83)) hasRegistered:
			(aTransaction
				cover: (125 to: 136)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{110 to: 123} ]] valueCoveringAll:
		{47 to: 57}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTests #test10 stamp: 'AF 5/22/2022 19:23:14'!
PASSED!

!testRun: #PortfolioTests #test11 stamp: 'AF 5/22/2022 19:23:14'!
PASSED!
!Behavior method!
bankAccountIsAlreadyAddedErrorDescription
	'bank account is already added in portfolio' coverAll:
		{45 to: 88}.! !

!testRun: #PortfolioTests #test12 stamp: 'AF 5/22/2022 19:23:14'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'AF 5/22/2022 19:23:14'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'AF 5/22/2022 19:23:14'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'AF 5/22/2022 19:23:14'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'AF 5/22/2022 19:23:14'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'AF 5/22/2022 19:23:14'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'AF 5/22/2022 19:23:14'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:24:32'!
test10PortfolioWithAccuntHasResgister
	
	| account deposit portfolio |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	deposit _ Deposit register: 10 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: (portfolio hasRegistered: deposit).
! !

!methodRemoval: PortfolioTests #test10 stamp: 'AF 5/22/2022 19:24:32'!
test10
	
	| account deposit portfolio |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	deposit _ Deposit register: 10 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: (portfolio hasRegistered: deposit).
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:25:43'!
test10PortfolioWithAnAccountShouldHaveItsAccountTransacctionRegistered
	
	| account deposit portfolio |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	deposit _ Deposit register: 10 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: (portfolio hasRegistered: deposit).
! !

!methodRemoval: PortfolioTests #test10PortfolioWithAccuntHasResgister stamp: 'AF 5/22/2022 19:25:43'!
test10PortfolioWithAccuntHasResgister
	
	| account deposit portfolio |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	deposit _ Deposit register: 10 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: (portfolio hasRegistered: deposit).
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:25:49'!
test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered
	
	| account deposit portfolio |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	deposit _ Deposit register: 10 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: (portfolio hasRegistered: deposit).
! !

!methodRemoval: PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransacctionRegistered stamp: 'AF 5/22/2022 19:25:49'!
test10PortfolioWithAnAccountShouldHaveItsAccountTransacctionRegistered
	
	| account deposit portfolio |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	deposit _ Deposit register: 10 on: account. 
	
	portfolio addBankAccount: account.
	
	self assert: (portfolio hasRegistered: deposit).
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:25:56'!
test11test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered
	
	| portfolio account1 account2 deposit1 deposit2 portfolioToAdd withdraw |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd _ Portfolio new.
	portfolio _ Portfolio new.
	
	deposit1 _ Deposit register: 10 on: account1.
	
	deposit2 _ Deposit register: 50 on: account2.
	withdraw _ Withdraw register: 20 on: account2.	
	
	portfolioToAdd addBankAccount: account1.	
	
	portfolio addBankAccount: portfolioToAdd.
	portfolio addBankAccount: account2.
	
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).
	self deny: (portfolioToAdd hasRegistered: deposit2).
! !

!methodRemoval: PortfolioTests #test11 stamp: 'AF 5/22/2022 19:25:56'!
test11
	
	| portfolio account1 account2 deposit1 deposit2 portfolioToAdd withdraw |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd _ Portfolio new.
	portfolio _ Portfolio new.
	
	deposit1 _ Deposit register: 10 on: account1.
	
	deposit2 _ Deposit register: 50 on: account2.
	withdraw _ Withdraw register: 20 on: account2.	
	
	portfolioToAdd addBankAccount: account1.	
	
	portfolio addBankAccount: portfolioToAdd.
	portfolio addBankAccount: account2.
	
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).
	self deny: (portfolioToAdd hasRegistered: deposit2).
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:26:10'!
test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered
	
	| portfolio account1 account2 deposit1 deposit2 portfolioToAdd withdraw |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd _ Portfolio new.
	portfolio _ Portfolio new.
	
	deposit1 _ Deposit register: 10 on: account1.
	
	deposit2 _ Deposit register: 50 on: account2.
	withdraw _ Withdraw register: 20 on: account2.	
	
	portfolioToAdd addBankAccount: account1.	
	
	portfolio addBankAccount: portfolioToAdd.
	portfolio addBankAccount: account2.
	
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).
	self deny: (portfolioToAdd hasRegistered: deposit2).
! !

!methodRemoval: PortfolioTests #test11test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 19:26:10'!
test11test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered
	
	| portfolio account1 account2 deposit1 deposit2 portfolioToAdd withdraw |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd _ Portfolio new.
	portfolio _ Portfolio new.
	
	deposit1 _ Deposit register: 10 on: account1.
	
	deposit2 _ Deposit register: 50 on: account2.
	withdraw _ Withdraw register: 20 on: account2.	
	
	portfolioToAdd addBankAccount: account1.	
	
	portfolio addBankAccount: portfolioToAdd.
	portfolio addBankAccount: account2.
	
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).
	self deny: (portfolioToAdd hasRegistered: deposit2).
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:28:41'!
test12addPortfolioToItself

	| account portfolio |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test12 stamp: 'AF 5/22/2022 19:28:41'!
test12

	| account portfolio |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:28:55' prior: 50477664!
test12addPortfolioToItself

	| account portfolio |
	portfolio _ Portfolio new.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!testRun: #PortfolioTests #test12addPortfolioToItself stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test04BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithPortfolioShouldBeTheSumOFInnerPortfoliosBalances stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test06anEmptyPorfolioShouldNotHaveTransactions stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test12addPortfolioToItself stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test13 stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test14 stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test15 stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test16 stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'AF 5/22/2022 19:28:56'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'AF 5/22/2022 19:28:56'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:39:03'!
test12addingPortfolioToItselfMustRiseAnError

	| account portfolio |
	portfolio _ Portfolio new.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test12addPortfolioToItself stamp: 'AF 5/22/2022 19:39:03'!
test12addPortfolioToItself

	| account portfolio |
	portfolio _ Portfolio new.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:39:26'!
test12addingPortfolioToItselfShouldRiceAnError

	| account portfolio |
	portfolio _ Portfolio new.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test12addingPortfolioToItselfMustRiseAnError stamp: 'AF 5/22/2022 19:39:26'!
test12addingPortfolioToItselfMustRiseAnError

	| account portfolio |
	portfolio _ Portfolio new.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:39:42'!
test12addingPortfolioToItselfShouldRaiseAnError

	| account portfolio |
	portfolio _ Portfolio new.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test12addingPortfolioToItselfShouldRiceAnError stamp: 'AF 5/22/2022 19:39:42'!
test12addingPortfolioToItselfShouldRiceAnError

	| account portfolio |
	portfolio _ Portfolio new.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:40:41'!
test13AddingAParentToAPortfiolioShouldRiseAnError

	| account portfolio portfolioParent |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.	
	portfolioParent _ Portfolio new.
	
	portfolio addBankAccount: account.
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolioParent addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test13 stamp: 'AF 5/22/2022 19:40:41'!
test13

	| account portfolio portfolioParent |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.	
	portfolioParent _ Portfolio new.
	
	portfolio addBankAccount: account.
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolioParent addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:41:03'!
test13AddingAParentToAPortfolioShouldRaiseAnError

	| account portfolio portfolioParent |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.	
	portfolioParent _ Portfolio new.
	
	portfolio addBankAccount: account.
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolioParent addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test13AddingAParentToAPortfiolioShouldRiseAnError stamp: 'AF 5/22/2022 19:41:03'!
test13AddingAParentToAPortfiolioShouldRiseAnError

	| account portfolio portfolioParent |
	
	account _ ReceptiveAccount new.	
	portfolio _ Portfolio new.	
	portfolioParent _ Portfolio new.
	
	portfolio addBankAccount: account.
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolioParent addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:42:08'!
test14AddingAccountInPortfolioParentS

	| account portfolioParent portfolio |
	
	account _ ReceptiveAccount new.	
	portfolioParent _ Portfolio new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolioParent addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test14 stamp: 'AF 5/22/2022 19:42:08'!
test14

	| account portfolioParent portfolio |
	
	account _ ReceptiveAccount new.	
	portfolioParent _ Portfolio new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolioParent addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:46:53'!
test14AddingAnAccountThatIsAddedInOneOfYourDecendantsShouldRiseAnError

	| account portfolioParent portfolio |
	
	account _ ReceptiveAccount new.	
	portfolioParent _ Portfolio new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolioParent addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test14AddingAccountInPortfolioParentS stamp: 'AF 5/22/2022 19:46:53'!
test14AddingAccountInPortfolioParentS

	| account portfolioParent portfolio |
	
	account _ ReceptiveAccount new.	
	portfolioParent _ Portfolio new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolioParent addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:47:53'!
test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError

	| account portfolioParent portfolio |
	
	account _ ReceptiveAccount new.	
	portfolioParent _ Portfolio new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolioParent addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test14AddingAnAccountThatIsAddedInOneOfYourDecendantsShouldRiseAnError stamp: 'AF 5/22/2022 19:47:53'!
test14AddingAnAccountThatIsAddedInOneOfYourDecendantsShouldRiseAnError

	| account portfolioParent portfolio |
	
	account _ ReceptiveAccount new.	
	portfolioParent _ Portfolio new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolioParent addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:48:42'!
test15AddingAParentMustR

	| portfolio portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolio addBankAccount: portfolioParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test15 stamp: 'AF 5/22/2022 19:48:42'!
test15

	| portfolio portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolio addBankAccount: portfolioParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:48:53'!
test15AddingAParentMustRaiseAnError

	| portfolio portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolio addBankAccount: portfolioParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test15AddingAParentMustR stamp: 'AF 5/22/2022 19:48:53'!
test15AddingAParentMustR

	| portfolio portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolio addBankAccount: portfolioParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:51:15' prior: 50477883!
test13AddingAParentToAPortfolioShouldRaiseAnError

	| portfolio portfolioParent |
		
	portfolio _ Portfolio new.	
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolioParent addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:51:33'!
test13AddingAPortfolioTwiceShouldRaiseAnError

	| portfolio portfolioParent |
		
	portfolio _ Portfolio new.	
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolioParent addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test13AddingAParentToAPortfolioShouldRaiseAnError stamp: 'AF 5/22/2022 19:51:33'!
test13AddingAParentToAPortfolioShouldRaiseAnError

	| portfolio portfolioParent |
		
	portfolio _ Portfolio new.	
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolioParent addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:52:10'!
test15AddingAParentShouldRaiseAnError

	| portfolio portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolio addBankAccount: portfolioParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test15AddingAParentMustRaiseAnError stamp: 'AF 5/22/2022 19:52:10'!
test15AddingAParentMustRaiseAnError

	| portfolio portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self should: [ portfolio addBankAccount: portfolioParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!

!methodRemoval: PortfolioTests #test16 stamp: 'AF 5/22/2022 19:52:41'!
test16

	| portfolio portfolioParent1 portfolioParent2 |
	
	portfolio _ Portfolio new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.	
	
	self should: [ portfolio addBankAccount: portfolioParent1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!Behavior method!
initialize
	(bankAccounts _ [
	(Set
		cover: (29 to: 31)
		declaredAt: (29 to: 31)) new ] valueCoveringAll:
		{33 to: 35})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).
	(parents _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (39 to: 45)
		declaredAt: (39 to: 45).! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{37 to: 37})
		cover: (27 to: 33)
		declaredAt: (14 to: 20).
	[
	(bankAccounts
		cover: (42 to: 53)
		declaredAt: (42 to: 53)) do: [ :aRegisteredBankAccount |
		(balance _ [
		([
		(aRegisteredBankAccount
			cover: (97 to: 118)
			declaredAt: (62 to: 83)) balance ] valueCoveringAll:
			{120 to: 126}) +
			(balance
				cover: (87 to: 93)
				declaredAt: (14 to: 20)) ] valueCoveringAll:
			{128 to: 128})
			cover: (130 to: 136)
			declaredAt: (14 to: 20) ]] valueCoveringAll:
		{55 to: 57}.
	^ balance
		cover: (144 to: 150)
		declaredAt: (14 to: 20).! !

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 19:52:46'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addBankAccount: aBankAccount
	| roots |
	(roots _ [
	(self coverAll:
		{55 to: 58}) findRoots ] valueCoveringAll:
		{60 to: 68})
		cover: (47 to: 51)
		declaredAt: (35 to: 39).
	[
	(roots
		cover: (72 to: 76)
		declaredAt: (35 to: 39)) do: [ :aRoot |
		[
		(aRoot
			cover: (93 to: 97)
			declaredAt: (85 to: 89)) assertABankAccountIsNotDescendant:
			(aBankAccount
				cover: (134 to: 145)
				declaredAt: (17 to: 28)) ] valueCoveringAll:
			{99 to: 132} ]] valueCoveringAll:
		{78 to: 80}.
	[
	(bankAccounts
		cover: (154 to: 165)
		declaredAt: (154 to: 165)) add:
		(aBankAccount
			cover: (172 to: 183)
			declaredAt: (17 to: 28)) ] valueCoveringAll:
		{167 to: 170}.
	[
	([
	(aBankAccount
		cover: (188 to: 199)
		declaredAt: (17 to: 28)) isKindOf:
		(Portfolio
			cover: (211 to: 219)
			declaredAt: (211 to: 219)) ] valueCoveringAll:
		{201 to: 209}) ifTrue: [
		[
		(aBankAccount
			cover: (231 to: 242)
			declaredAt: (17 to: 28)) markAsParent:
			(self coverAll:
				{258 to: 261}) ] valueCoveringAll:
			{244 to: 256} ]] valueCoveringAll:
		{222 to: 228}.! !
!Behavior method!
findRoots
	| roots |
	(roots _ [
	(Set
		cover: (32 to: 34)
		declaredAt: (32 to: 34)) new ] valueCoveringAll:
		{36 to: 38})
		cover: (24 to: 28)
		declaredAt: (15 to: 19).
	[
	(self coverAll:
		{42 to: 45}) addRootsTo:
		(roots
			cover: (59 to: 63)
			declaredAt: (15 to: 19)) ] valueCoveringAll:
		{47 to: 57}.
	^ roots
		cover: (68 to: 72)
		declaredAt: (15 to: 19).! !
!Behavior method!
addRootsTo: aSetOfRoots
	[
	([
	(self coverAll:
		{28 to: 31}) isRoot ] valueCoveringAll:
		{33 to: 38})
		ifTrue: [
			[
			(aSetOfRoots
				cover: (53 to: 63)
				declaredAt: (13 to: 23)) add:
				(self coverAll:
					{70 to: 73}) ] valueCoveringAll:
				{65 to: 68} ]
		ifFalse: [
			[
			(parents
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) do: [ :aParent |
				[
				(aParent
					cover: (115 to: 121)
					declaredAt: (105 to: 111)) addRootsTo:
					(aSetOfRoots
						cover: (135 to: 145)
						declaredAt: (13 to: 23)) ] valueCoveringAll:
					{123 to: 133} ]] valueCoveringAll:
				{98 to: 100} ]] valueCoveringAll:
		{44 to: 50. 79 to: 86}.! !
!Behavior method!
isRoot
	^ [
	(parents
		cover: (12 to: 18)
		declaredAt: (12 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
assertABankAccountIsNotDescendant: aBankAccount
	[
	([
	(aBankAccount
		cover: (55 to: 66)
		declaredAt: (36 to: 47)) =
		(self coverAll:
			{70 to: 73}) ] valueCoveringAll:
		{68 to: 68}) ifTrue: [
		[
		(self coverAll:
			{85 to: 88}) error:
			([
			(Portfolio
				cover: (97 to: 105)
				declaredAt: (97 to: 105)) bankAccountIsAlreadyAddedErrorDescription ] valueCoveringAll:
				{107 to: 147}) ] valueCoveringAll:
			{90 to: 95} ]] valueCoveringAll:
		{76 to: 82}.
	[
	(bankAccounts
		cover: (154 to: 165)
		declaredAt: (154 to: 165)) do: [ :aRegisteredBankAccount |
		[
		([
		(aRegisteredBankAccount
			cover: (205 to: 226)
			declaredAt: (174 to: 195)) =
			(aBankAccount
				cover: (230 to: 241)
				declaredAt: (36 to: 47)) ] valueCoveringAll:
			{228 to: 228}) ifTrue: [
			[
			(self coverAll:
				{253 to: 256}) error:
				([
				(Portfolio
					cover: (265 to: 273)
					declaredAt: (97 to: 105)) bankAccountIsAlreadyAddedErrorDescription ] valueCoveringAll:
					{275 to: 315}) ] valueCoveringAll:
				{258 to: 263} ]] valueCoveringAll:
			{244 to: 250}.
		[
		([
		(aRegisteredBankAccount
			cover: (323 to: 344)
			declaredAt: (174 to: 195)) isKindOf:
			(Portfolio
				cover: (356 to: 364)
				declaredAt: (97 to: 105)) ] valueCoveringAll:
			{346 to: 354}) ifTrue: [
			[
			(aRegisteredBankAccount
				cover: (377 to: 398)
				declaredAt: (174 to: 195)) assertABankAccountIsNotDescendant:
				(aBankAccount
					cover: (435 to: 446)
					declaredAt: (36 to: 47)) ] valueCoveringAll:
				{400 to: 433} ]] valueCoveringAll:
			{367 to: 373} ]] valueCoveringAll:
		{167 to: 169}.! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{34 to: 34})
		cover: (24 to: 30)
		declaredAt: (13 to: 19).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(balance _ [
		(aTransaction
			cover: (83 to: 94)
			declaredAt: (58 to: 69)) addTo:
			(balance
				cover: (73 to: 79)
				declaredAt: (13 to: 19)) ] valueCoveringAll:
			{96 to: 101})
			cover: (103 to: 109)
			declaredAt: (13 to: 19) ]] valueCoveringAll:
		{51 to: 53}.
	^ balance
		cover: (119 to: 125)
		declaredAt: (13 to: 19).! !
!Behavior method!
addTo: aBalanceBeingCalculated
	^ [
	(aBalanceBeingCalculated
		cover: (37 to: 59)
		declaredAt: (8 to: 30)) +
		([
		(self coverAll:
			{63 to: 66}) value ] valueCoveringAll:
			{68 to: 72}) ] valueCoveringAll:
		{61 to: 61}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 19:52:46'!
PASSED!
!Behavior method!
markAsParent: aPortfolio
	[
	(parents
		cover: (28 to: 34)
		declaredAt: (28 to: 34)) add:
		(aPortfolio
			cover: (41 to: 50)
			declaredAt: (15 to: 24)) ] valueCoveringAll:
		{36 to: 39}.! !

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 19:52:46'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
addTo: aBalanceBeingCalculated
	^ [
	(aBalanceBeingCalculated
		cover: (37 to: 59)
		declaredAt: (8 to: 30)) -
		([
		(self coverAll:
			{63 to: 66}) value ] valueCoveringAll:
			{68 to: 72}) ] valueCoveringAll:
		{61 to: 61}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTests #test04BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 19:52:46'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithPortfolioShouldBeTheSumOFInnerPortfoliosBalances stamp: 'AF 5/22/2022 19:52:46'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	(self coverAll:
		{75 to: 78}) addTransactionsTo:
		(transactions
			cover: (99 to: 110)
			declaredAt: (18 to: 29)) ] valueCoveringAll:
		{80 to: 97}.
	^ transactions
		cover: (117 to: 128)
		declaredAt: (18 to: 29).! !
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(bankAccounts
		cover: (48 to: 59)
		declaredAt: (48 to: 59)) do: [ :aBankAccount |
		[
		(aBankAccount
			cover: (83 to: 94)
			declaredAt: (68 to: 79)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (115 to: 139)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{96 to: 113} ]] valueCoveringAll:
		{61 to: 63}.! !

!testRun: #PortfolioTests #test06anEmptyPorfolioShouldNotHaveTransactions stamp: 'AF 5/22/2022 19:52:46'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 19:52:46'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 19:52:46'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(bankAccounts
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) anySatisfy: [ :aRegisteredBankAccount |
		[
		(aRegisteredBankAccount
			cover: (87 to: 108)
			declaredAt: (62 to: 83)) hasRegistered:
			(aTransaction
				cover: (125 to: 136)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{110 to: 123} ]] valueCoveringAll:
		{47 to: 57}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 19:52:46'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 19:52:46'!
PASSED!
!Behavior method!
bankAccountIsAlreadyAddedErrorDescription
	'bank account is already added in portfolio' coverAll:
		{45 to: 88}.! !

!testRun: #PortfolioTests #test12addingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 19:52:46'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 19:52:46'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 19:52:46'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 19:52:46'!
PASSED!

!testRun: #PortfolioTests #test17 stamp: 'AF 5/22/2022 19:52:46'!
PASSED!

!testRun: #PortfolioTests #test18 stamp: 'AF 5/22/2022 19:52:46'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:53:58'!
test17AddingAnAncestorShouldRaiseAnError

	| portfolio portfolioGrandParent portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.	
	portfolioGrandParent _ Portfolio new.
	
	portfolioGrandParent addBankAccount: portfolioParent.
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolio addBankAccount: portfolioGrandParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test17 stamp: 'AF 5/22/2022 19:53:58'!
test17

	| portfolio portfolioGrandParent portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.	
	portfolioGrandParent _ Portfolio new.
	
	portfolioGrandParent addBankAccount: portfolioParent.
	portfolioParent addBankAccount: portfolio.	
	
	self should: [ portfolio addBankAccount: portfolioGrandParent ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 19:58:20'!
test18AddingAnAccountToAPortfolioThatIsAlreadyAddedToATreeThatThePortfolioIsAlreadyInShouldRiseAnError

	| account portfolio portfolioParent1 portfolioParent2 |
	
	account _ ReceptiveAccount new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	portfolio _ Portfolio new.
		
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: account.	
	
	self should: [ portfolio addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test18 stamp: 'AF 5/22/2022 19:58:20'!
test18

	| account portfolio portfolioParent1 portfolioParent2 |
	
	account _ ReceptiveAccount new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	portfolio _ Portfolio new.
		
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: account.	
	
	self should: [ portfolio addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:00:06'!
test18AddingAnAccountToAPortfolioThatItsAlreadyADecendantOfAnAncestorShouldRiseAnError

	| account portfolio portfolioParent1 portfolioParent2 |
	
	account _ ReceptiveAccount new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	portfolio _ Portfolio new.
		
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: account.	
	
	self should: [ portfolio addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyAddedToATreeThatThePortfolioIsAlreadyInShouldRiseAnError stamp: 'AF 5/22/2022 20:00:06'!
test18AddingAnAccountToAPortfolioThatIsAlreadyAddedToATreeThatThePortfolioIsAlreadyInShouldRiseAnError

	| account portfolio portfolioParent1 portfolioParent2 |
	
	account _ ReceptiveAccount new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	portfolio _ Portfolio new.
		
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: account.	
	
	self should: [ portfolio addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:00:40'!
test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError

	| account portfolio portfolioParent1 portfolioParent2 |
	
	account _ ReceptiveAccount new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	portfolio _ Portfolio new.
		
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: account.	
	
	self should: [ portfolio addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test18AddingAnAccountToAPortfolioThatItsAlreadyADecendantOfAnAncestorShouldRiseAnError stamp: 'AF 5/22/2022 20:00:40'!
test18AddingAnAccountToAPortfolioThatItsAlreadyADecendantOfAnAncestorShouldRiseAnError

	| account portfolio portfolioParent1 portfolioParent2 |
	
	account _ ReceptiveAccount new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	portfolio _ Portfolio new.
		
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: account.	
	
	self should: [ portfolio addBankAccount: account ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:01:48'!
test06AnEmptyPortfolioShouldNotHaveTransactions

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions isEmpty
	
! !

!methodRemoval: PortfolioTests #test06anEmptyPorfolioShouldNotHaveTransactions stamp: 'AF 5/22/2022 20:01:48'!
test06anEmptyPorfolioShouldNotHaveTransactions

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions isEmpty
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:01:55'!
test06AnEmptyPortfolioShouldNotHaveAnyTransactions

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions isEmpty
	
! !

!methodRemoval: PortfolioTests #test06AnEmptyPortfolioShouldNotHaveTransactions stamp: 'AF 5/22/2022 20:01:55'!
test06AnEmptyPortfolioShouldNotHaveTransactions

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions isEmpty
	
!

!methodRemoval: PortfolioTests #test04BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:03:22'!
test04BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances

	| portfolio account1 account2 expectedBalance |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.
	
	Deposit register: 100 on: account2.
	Withdraw register: 75 on: account2.	
	
	portfolio addBankAccount: account1.
	portfolio addBankAccount: account2.
	
	expectedBalance _ account1 balance + account2 balance.
	
	self assert: expectedBalance equals: portfolio balance
	
!
!Behavior method!
initialize
	(bankAccounts _ [
	(Set
		cover: (29 to: 31)
		declaredAt: (29 to: 31)) new ] valueCoveringAll:
		{33 to: 35})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).
	(parents _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (39 to: 45)
		declaredAt: (39 to: 45).! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{37 to: 37})
		cover: (27 to: 33)
		declaredAt: (14 to: 20).
	[
	(bankAccounts
		cover: (42 to: 53)
		declaredAt: (42 to: 53)) do: [ :aRegisteredBankAccount |
		(balance _ [
		([
		(aRegisteredBankAccount
			cover: (97 to: 118)
			declaredAt: (62 to: 83)) balance ] valueCoveringAll:
			{120 to: 126}) +
			(balance
				cover: (87 to: 93)
				declaredAt: (14 to: 20)) ] valueCoveringAll:
			{128 to: 128})
			cover: (130 to: 136)
			declaredAt: (14 to: 20) ]] valueCoveringAll:
		{55 to: 57}.
	^ balance
		cover: (144 to: 150)
		declaredAt: (14 to: 20).! !

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:03:26'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addBankAccount: aBankAccount
	| roots |
	(roots _ [
	(self coverAll:
		{55 to: 58}) findRoots ] valueCoveringAll:
		{60 to: 68})
		cover: (47 to: 51)
		declaredAt: (35 to: 39).
	[
	(roots
		cover: (72 to: 76)
		declaredAt: (35 to: 39)) do: [ :aRoot |
		[
		(aRoot
			cover: (93 to: 97)
			declaredAt: (85 to: 89)) assertABankAccountIsNotDescendant:
			(aBankAccount
				cover: (134 to: 145)
				declaredAt: (17 to: 28)) ] valueCoveringAll:
			{99 to: 132} ]] valueCoveringAll:
		{78 to: 80}.
	[
	(bankAccounts
		cover: (154 to: 165)
		declaredAt: (154 to: 165)) add:
		(aBankAccount
			cover: (172 to: 183)
			declaredAt: (17 to: 28)) ] valueCoveringAll:
		{167 to: 170}.
	[
	([
	(aBankAccount
		cover: (188 to: 199)
		declaredAt: (17 to: 28)) isKindOf:
		(Portfolio
			cover: (211 to: 219)
			declaredAt: (211 to: 219)) ] valueCoveringAll:
		{201 to: 209}) ifTrue: [
		[
		(aBankAccount
			cover: (231 to: 242)
			declaredAt: (17 to: 28)) markAsParent:
			(self coverAll:
				{258 to: 261}) ] valueCoveringAll:
			{244 to: 256} ]] valueCoveringAll:
		{222 to: 228}.! !
!Behavior method!
findRoots
	| roots |
	(roots _ [
	(Set
		cover: (32 to: 34)
		declaredAt: (32 to: 34)) new ] valueCoveringAll:
		{36 to: 38})
		cover: (24 to: 28)
		declaredAt: (15 to: 19).
	[
	(self coverAll:
		{42 to: 45}) addRootsTo:
		(roots
			cover: (59 to: 63)
			declaredAt: (15 to: 19)) ] valueCoveringAll:
		{47 to: 57}.
	^ roots
		cover: (68 to: 72)
		declaredAt: (15 to: 19).! !
!Behavior method!
addRootsTo: aSetOfRoots
	[
	([
	(self coverAll:
		{28 to: 31}) isRoot ] valueCoveringAll:
		{33 to: 38})
		ifTrue: [
			[
			(aSetOfRoots
				cover: (53 to: 63)
				declaredAt: (13 to: 23)) add:
				(self coverAll:
					{70 to: 73}) ] valueCoveringAll:
				{65 to: 68} ]
		ifFalse: [
			[
			(parents
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) do: [ :aParent |
				[
				(aParent
					cover: (115 to: 121)
					declaredAt: (105 to: 111)) addRootsTo:
					(aSetOfRoots
						cover: (135 to: 145)
						declaredAt: (13 to: 23)) ] valueCoveringAll:
					{123 to: 133} ]] valueCoveringAll:
				{98 to: 100} ]] valueCoveringAll:
		{44 to: 50. 79 to: 86}.! !
!Behavior method!
isRoot
	^ [
	(parents
		cover: (12 to: 18)
		declaredAt: (12 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
assertABankAccountIsNotDescendant: aBankAccount
	[
	([
	(aBankAccount
		cover: (55 to: 66)
		declaredAt: (36 to: 47)) =
		(self coverAll:
			{70 to: 73}) ] valueCoveringAll:
		{68 to: 68}) ifTrue: [
		[
		(self coverAll:
			{85 to: 88}) error:
			([
			(Portfolio
				cover: (97 to: 105)
				declaredAt: (97 to: 105)) bankAccountIsAlreadyAddedErrorDescription ] valueCoveringAll:
				{107 to: 147}) ] valueCoveringAll:
			{90 to: 95} ]] valueCoveringAll:
		{76 to: 82}.
	[
	(bankAccounts
		cover: (154 to: 165)
		declaredAt: (154 to: 165)) do: [ :aRegisteredBankAccount |
		[
		([
		(aRegisteredBankAccount
			cover: (205 to: 226)
			declaredAt: (174 to: 195)) =
			(aBankAccount
				cover: (230 to: 241)
				declaredAt: (36 to: 47)) ] valueCoveringAll:
			{228 to: 228}) ifTrue: [
			[
			(self coverAll:
				{253 to: 256}) error:
				([
				(Portfolio
					cover: (265 to: 273)
					declaredAt: (97 to: 105)) bankAccountIsAlreadyAddedErrorDescription ] valueCoveringAll:
					{275 to: 315}) ] valueCoveringAll:
				{258 to: 263} ]] valueCoveringAll:
			{244 to: 250}.
		[
		([
		(aRegisteredBankAccount
			cover: (323 to: 344)
			declaredAt: (174 to: 195)) isKindOf:
			(Portfolio
				cover: (356 to: 364)
				declaredAt: (97 to: 105)) ] valueCoveringAll:
			{346 to: 354}) ifTrue: [
			[
			(aRegisteredBankAccount
				cover: (377 to: 398)
				declaredAt: (174 to: 195)) assertABankAccountIsNotDescendant:
				(aBankAccount
					cover: (435 to: 446)
					declaredAt: (36 to: 47)) ] valueCoveringAll:
				{400 to: 433} ]] valueCoveringAll:
			{367 to: 373} ]] valueCoveringAll:
		{167 to: 169}.! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{34 to: 34})
		cover: (24 to: 30)
		declaredAt: (13 to: 19).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(balance _ [
		(aTransaction
			cover: (83 to: 94)
			declaredAt: (58 to: 69)) addTo:
			(balance
				cover: (73 to: 79)
				declaredAt: (13 to: 19)) ] valueCoveringAll:
			{96 to: 101})
			cover: (103 to: 109)
			declaredAt: (13 to: 19) ]] valueCoveringAll:
		{51 to: 53}.
	^ balance
		cover: (119 to: 125)
		declaredAt: (13 to: 19).! !
!Behavior method!
addTo: aBalanceBeingCalculated
	^ [
	(aBalanceBeingCalculated
		cover: (37 to: 59)
		declaredAt: (8 to: 30)) +
		([
		(self coverAll:
			{63 to: 66}) value ] valueCoveringAll:
			{68 to: 72}) ] valueCoveringAll:
		{61 to: 61}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:03:26'!
PASSED!
!Behavior method!
markAsParent: aPortfolio
	[
	(parents
		cover: (28 to: 34)
		declaredAt: (28 to: 34)) add:
		(aPortfolio
			cover: (41 to: 50)
			declaredAt: (15 to: 24)) ] valueCoveringAll:
		{36 to: 39}.! !

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:03:26'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
addTo: aBalanceBeingCalculated
	^ [
	(aBalanceBeingCalculated
		cover: (37 to: 59)
		declaredAt: (8 to: 30)) -
		([
		(self coverAll:
			{63 to: 66}) value ] valueCoveringAll:
			{68 to: 72}) ] valueCoveringAll:
		{61 to: 61}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithPortfolioShouldBeTheSumOFInnerPortfoliosBalances stamp: 'AF 5/22/2022 20:03:26'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	(self coverAll:
		{75 to: 78}) addTransactionsTo:
		(transactions
			cover: (99 to: 110)
			declaredAt: (18 to: 29)) ] valueCoveringAll:
		{80 to: 97}.
	^ transactions
		cover: (117 to: 128)
		declaredAt: (18 to: 29).! !
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(bankAccounts
		cover: (48 to: 59)
		declaredAt: (48 to: 59)) do: [ :aBankAccount |
		[
		(aBankAccount
			cover: (83 to: 94)
			declaredAt: (68 to: 79)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (115 to: 139)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{96 to: 113} ]] valueCoveringAll:
		{61 to: 63}.! !

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:03:26'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:03:26'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:03:26'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(bankAccounts
		cover: (34 to: 45)
		declaredAt: (34 to: 45)) anySatisfy: [ :aRegisteredBankAccount |
		[
		(aRegisteredBankAccount
			cover: (87 to: 108)
			declaredAt: (62 to: 83)) hasRegistered:
			(aTransaction
				cover: (125 to: 136)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{110 to: 123} ]] valueCoveringAll:
		{47 to: 57}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:03:26'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:03:26'!
PASSED!
!Behavior method!
bankAccountIsAlreadyAddedErrorDescription
	'bank account is already added in portfolio' coverAll:
		{45 to: 88}.! !

!testRun: #PortfolioTests #test12addingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:03:26'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:03:26'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:03:26'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:03:26'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:03:26'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:03:26'!
PASSED!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:04:08'!
test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances

	| portfolio account1 account2 portfolioToAdd1 portfolioToAdd2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd1 _ Portfolio new.
	portfolioToAdd2 _ Portfolio new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.	
	
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.	
	
	portfolioToAdd1 addBankAccount: account1.	
	portfolioToAdd2 addBankAccount: account2.	
	
	portfolio addBankAccount: portfolioToAdd1.
	portfolio addBankAccount: portfolioToAdd2.
	
	self assert: 150 equals: portfolio balance
	
! !

!methodRemoval: PortfolioTests #test05BalanceOfPortfolioWithPortfolioShouldBeTheSumOFInnerPortfoliosBalances stamp: 'AF 5/22/2022 20:04:08'!
test05BalanceOfPortfolioWithPortfolioShouldBeTheSumOFInnerPortfoliosBalances

	| portfolio account1 account2 portfolioToAdd1 portfolioToAdd2 |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd1 _ Portfolio new.
	portfolioToAdd2 _ Portfolio new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.	
	
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.	
	
	portfolioToAdd1 addBankAccount: account1.	
	portfolioToAdd2 addBankAccount: account2.	
	
	portfolio addBankAccount: portfolioToAdd1.
	portfolio addBankAccount: portfolioToAdd2.
	
	self assert: 150 equals: portfolio balance
	
!
!PortfolioTests methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:05:46'!
test12AddingPortfolioToItselfShouldRaiseAnError

	| account portfolio |
	portfolio _ Portfolio new.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !

!methodRemoval: PortfolioTests #test12addingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:05:46'!
test12addingPortfolioToItselfShouldRaiseAnError

	| account portfolio |
	portfolio _ Portfolio new.
	
	self should: [ portfolio addBankAccount: portfolio ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
!

!methodRemoval: Portfolio class #portfolioCannotBeAddedToItselfErrorDescription stamp: 'AF 5/22/2022 20:12:37'!
portfolioCannotBeAddedToItselfErrorDescription

	^'cannot add a portfolio into itself'!
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:15:33'!
assertSelfisDiferentFrom: aBankAccount

	^ (aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription]! !
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:15:33' prior: 50475458!
assertABankAccountIsNotDescendant: aBankAccount	
		
	self assertSelfisDiferentFrom: aBankAccount.
	
	bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendant: aBankAccount ].
	].
	
	
	! !
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:15:49'!
assertSelfisNot: aBankAccount

	^ (aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:15:49' prior: 50479290!
assertABankAccountIsNotDescendant: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	
	bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendant: aBankAccount ].
	].
	
	
	! !

!methodRemoval: Portfolio #assertSelfisDiferentFrom: stamp: 'AF 5/22/2022 20:15:49'!
assertSelfisDiferentFrom: aBankAccount

	^ (aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription]!
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:17:45' prior: 50479313!
assertABankAccountIsNotDescendant: aBankAccount	
		
	
	
	bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendant: aBankAccount ].
	].
	
	
	! !

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:18:17'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:18:17'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:18:17'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:18:17'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:18:17'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:18:17'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:18:17'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:18:17'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:18:17'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:17'!
FAILURE!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:17'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:17'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:17'!
FAILURE!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:17'!
FAILURE!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:17'!
PASSED!
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:18:25' prior: 50479336!
assertABankAccountIsNotDescendant: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	
	bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendant: aBankAccount ].
	].
	
	
	! !

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:25'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:18:25'!
PASSED!
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:19:25'!
assertABankAccountIsNotDescendantssdssdsdfsfASDFASDFASDF: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	
	bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendant: aBankAccount ].
	].
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:19:25' prior: 50479411!
assertABankAccountIsNotDescendant: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	
	bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendantssdssdsdfsfASDFASDFASDF: aBankAccount ].
	].
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:19:25' prior: 50475269!
addBankAccount: aBankAccount
	
	| roots |
		
	roots _ self findRoots.
	roots do: [ :aRoot | aRoot assertABankAccountIsNotDescendantssdssdsdfsfASDFASDFASDF: aBankAccount. ].
	
	bankAccounts add: aBankAccount.
	(aBankAccount isKindOf: Portfolio) ifTrue: [aBankAccount markAsParent: self]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:19:25' prior: 50479486!
assertABankAccountIsNotDescendantssdssdsdfsfASDFASDFASDF: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	
	bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendantssdssdsdfsfASDFASDFASDF: aBankAccount ].
	].
	
	
	! !

!methodRemoval: Portfolio #assertABankAccountIsNotDescendant: stamp: 'AF 5/22/2022 20:19:25'!
assertABankAccountIsNotDescendant: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	
	bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendantssdssdsdfsfASDFASDFASDF: aBankAccount ].
	].
	
	
	!
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:19:43'!
assertABankAccountIsNotDescendant: aBankAccount

	^ bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendantssdssdsdfsfASDFASDFASDF: aBankAccount ].
	]! !
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:19:43' prior: 50479532!
assertABankAccountIsNotDescendantssdssdsdfsfASDFASDFASDF: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	
	self assertABankAccountIsNotDescendant: aBankAccount.
	
	
	! !
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:19:54' prior: 50479565!
assertABankAccountIsNotDescendant: aBankAccount

	^ bankAccounts do: [ :aRegisteredBankAccount | 		
		(aRegisteredBankAccount = aBankAccount) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription] .
		(aRegisteredBankAccount isKindOf: Portfolio) ifTrue: [ aRegisteredBankAccount assertABankAccountIsNotDescendant: aBankAccount ].
	]! !

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:19:54'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:19:54'!
PASSED!
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:20:12' prior: 50479580!
assertABankAccountIsNotDescendantssdssdsdfsfASDFASDFASDF: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	self assertABankAccountIsNotDescendant: aBankAccount.
	
	
	! !
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:20:31'!
assertABankAccountIsNotInTree: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	self assertABankAccountIsNotDescendant: aBankAccount.
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:20:31' prior: 50479520!
addBankAccount: aBankAccount
	
	| roots |
		
	roots _ self findRoots.
	roots do: [ :aRoot | aRoot assertABankAccountIsNotInTree: aBankAccount. ].
	
	bankAccounts add: aBankAccount.
	(aBankAccount isKindOf: Portfolio) ifTrue: [aBankAccount markAsParent: self]! !

!methodRemoval: Portfolio #assertABankAccountIsNotDescendantssdssdsdfsfASDFASDFASDF: stamp: 'AF 5/22/2022 20:20:31'!
assertABankAccountIsNotDescendantssdssdsdfsfASDFASDFASDF: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	self assertABankAccountIsNotDescendant: aBankAccount.
	
	
	!
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:21:27'!
assertABankAnAccountIsNotAlreadyInTree: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	self assertABankAccountIsNotDescendant: aBankAccount.
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:21:27' prior: 50479679!
addBankAccount: aBankAccount
	
	| roots |
		
	roots _ self findRoots.
	roots do: [ :aRoot | aRoot assertABankAnAccountIsNotAlreadyInTree: aBankAccount. ].
	
	bankAccounts add: aBankAccount.
	(aBankAccount isKindOf: Portfolio) ifTrue: [aBankAccount markAsParent: self]! !

!methodRemoval: Portfolio #assertABankAccountIsNotInTree: stamp: 'AF 5/22/2022 20:21:27'!
assertABankAccountIsNotInTree: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	self assertABankAccountIsNotDescendant: aBankAccount.
	
	
	!
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:24:39' prior: 50479589!
assertABankAccountIsNotDescendant: aBankAccount

	^ bankAccounts do: [ :aRegisteredBankAccount | 		
		aRegisteredBankAccount assertSelfisNot: aBankAccount .
	]! !
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:25:13' prior: 50479305!
assertSelfisNot: aBankAccount

	(aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription].
	self assertABankAccountIsNotDescendant: aBankAccount! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'AF 5/22/2022 20:26:46'!
assertSelfIsNot: aBankAccount

	(aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/22/2022 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/22/2022 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/22/2022 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/22/2022 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/22/2022 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/22/2022 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/22/2022 20:26:46'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:26:52'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:26:52'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:26:52'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:26:52'!
ERROR!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:26:52'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:26:52'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:26:52'!
ERROR!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:26:52'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:26:52'!
ERROR!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:26:52'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:26:52'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:26:52'!
ERROR!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:26:52'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:26:52'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:26:52'!
ERROR!
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:27:53' prior: 50479699!
assertABankAnAccountIsNotAlreadyInTree: aBankAccount	
		
	self assertSelfisNot: aBankAccount.
	
	
	! !

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:27:55'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:27:55'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:27:55'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:27:55'!
ERROR!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:27:55'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:27:55'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:27:55'!
ERROR!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:27:55'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:27:55'!
ERROR!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:27:55'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:27:55'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:27:55'!
ERROR!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:27:55'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:27:55'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:27:55'!
ERROR!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:28:33'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:28:33'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:28:33'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:28:33'!
ERROR!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:28:33'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:28:33'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:28:33'!
ERROR!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:28:33'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:28:33'!
ERROR!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:28:33'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:28:33'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:28:33'!
ERROR!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:28:33'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:28:33'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:28:33'!
ERROR!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:28:37'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'AF 5/22/2022 20:29:06'!
assertSelfisNot: aBankAccount

	(aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription]! !

!methodRemoval: ReceptiveAccount #assertSelfIsNot: stamp: 'AF 5/22/2022 20:29:06'!
assertSelfIsNot: aBankAccount

	(aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription]!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/22/2022 20:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/22/2022 20:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/22/2022 20:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/22/2022 20:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/22/2022 20:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/22/2022 20:29:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/22/2022 20:29:08'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:29:12'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:29:12'!
PASSED!
!BankAccount methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:29:54'!
assertSelfisNot: aBankAccount

	self subclassResponsibility ! !
!BankAccount methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:32:07'!
assertSubTreeDoesNotContainsA: aBankAccount

	self subclassResponsibility ! !

!methodRemoval: BankAccount #assertSelfisNot: stamp: 'AF 5/22/2022 20:32:07'!
assertSelfisNot: aBankAccount

	self subclassResponsibility !
!BankAccount methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:32:29'!
assertSubtreeDoesNotContain: aBankAccount

	self subclassResponsibility ! !

!methodRemoval: BankAccount #assertSubTreeDoesNotContainsA: stamp: 'AF 5/22/2022 20:32:29'!
assertSubTreeDoesNotContainsA: aBankAccount

	self subclassResponsibility !
!Portfolio methodsFor: 'assertions' stamp: 'AF 5/22/2022 20:33:15' overrides: 50480081!
assertSubtreeDoesNotContain: aBankAccount

	(aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription].
	self assertABankAccountIsNotDescendant: aBankAccount! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'AF 5/22/2022 20:33:15' overrides: 50480081!
assertSubtreeDoesNotContain: aBankAccount

	(aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:33:15' prior: 50479726!
assertABankAccountIsNotDescendant: aBankAccount

	^ bankAccounts do: [ :aRegisteredBankAccount | 		
		aRegisteredBankAccount assertSubtreeDoesNotContain: aBankAccount .
	]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2022 20:33:15' prior: 50479836!
assertABankAnAccountIsNotAlreadyInTree: aBankAccount	
		
	self assertSubtreeDoesNotContain: aBankAccount.
	
	
	! !

!methodRemoval: Portfolio #assertSelfisNot: stamp: 'AF 5/22/2022 20:33:15'!
assertSelfisNot: aBankAccount

	(aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription].
	self assertABankAccountIsNotDescendant: aBankAccount!

!methodRemoval: ReceptiveAccount #assertSelfisNot: stamp: 'AF 5/22/2022 20:33:15'!
assertSelfisNot: aBankAccount

	(aBankAccount = self) ifTrue: [self error: Portfolio bankAccountIsAlreadyAddedErrorDescription]!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/22/2022 20:33:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/22/2022 20:33:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/22/2022 20:33:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/22/2022 20:33:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/22/2022 20:33:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/22/2022 20:33:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/22/2022 20:33:17'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:33:36'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:33:36'!
PASSED!
!PortfolioTests methodsFor: 'testing - adding' stamp: 'AF 5/22/2022 20:38:44'!
shouldRaiseAnErrorWhenAdding: anAccountToAdd to: aPortfolio
	
	self should: [ aPortfolio addBankAccount: anAccountToAdd ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anException | self assert: anException messageText equals: Portfolio bankAccountIsAlreadyAddedErrorDescription ]
! !
!PortfolioTests methodsFor: 'testing - adding' stamp: 'AF 5/22/2022 20:39:10' prior: 50479249!
test12AddingPortfolioToItselfShouldRaiseAnError

	| portfolio |
	portfolio _ Portfolio new.
	
	self shouldRaiseAnErrorWhenAdding: portfolio to: portfolio.
! !

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:13'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:13'!
PASSED!
!PortfolioTests methodsFor: 'testing - adding' stamp: 'AF 5/22/2022 20:39:34' prior: 50478117!
test13AddingAPortfolioTwiceShouldRaiseAnError

	| portfolio portfolioParent |
		
	portfolio _ Portfolio new.	
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self shouldRaiseAnErrorWhenAdding: portfolioParent to: portfolio.
! !

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:35'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:39:35'!
PASSED!
!PortfolioTests methodsFor: 'testing - adding' stamp: 'AF 5/22/2022 20:40:04' prior: 50477997!
test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError

	| account portfolioParent portfolio |
	
	account _ ReceptiveAccount new.	
	portfolioParent _ Portfolio new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	portfolioParent addBankAccount: portfolio.	
	
	self shouldRaiseAnErrorWhenAdding: portfolioParent to: account
! !

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:05'!
ERROR!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:11'!
ERROR!
!PortfolioTests methodsFor: 'testing - adding' stamp: 'AF 5/22/2022 20:40:29' prior: 50480387!
test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError

	| account portfolioParent portfolio |
	
	account _ ReceptiveAccount new.	
	portfolioParent _ Portfolio new.	
	portfolio _ Portfolio new.
	
	portfolio addBankAccount: account.
	
	portfolioParent addBankAccount: portfolio.	
	
	self shouldRaiseAnErrorWhenAdding: account to: portfolioParent
! !

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:29'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:29'!
PASSED!
!PortfolioTests methodsFor: 'testing - adding' stamp: 'AF 5/22/2022 20:40:48' prior: 50478151!
test15AddingAParentShouldRaiseAnError

	| portfolio portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.
	
	portfolioParent addBankAccount: portfolio.
	
	self shouldRaiseAnErrorWhenAdding: portfolioParent to: portfolio
! !

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:48'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:40:48'!
PASSED!
!PortfolioTests methodsFor: 'testing - adding' stamp: 'AF 5/22/2022 20:41:08' prior: 50478585!
test17AddingAnAncestorShouldRaiseAnError

	| portfolio portfolioGrandParent portfolioParent |
	
	portfolio _ Portfolio new.
	portfolioParent _ Portfolio new.	
	portfolioGrandParent _ Portfolio new.
	
	portfolioGrandParent addBankAccount: portfolioParent.
	portfolioParent addBankAccount: portfolio.	
	
	self shouldRaiseAnErrorWhenAdding: portfolioGrandParent to: portfolio! !

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:08'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:08'!
PASSED!
!PortfolioTests methodsFor: 'testing - adding' stamp: 'AF 5/22/2022 20:41:18' prior: 50478716!
test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError

	| account portfolio portfolioParent1 portfolioParent2 |
	
	account _ ReceptiveAccount new.	
	portfolioParent1 _ Portfolio new.	
	portfolioParent2 _ Portfolio new.
	portfolio _ Portfolio new.
		
	portfolioParent1 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: portfolio.
	portfolioParent2 addBankAccount: account.	
	
	self shouldRaiseAnErrorWhenAdding: account to: portfolio
! !

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:18'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:41:18'!
PASSED!
!PortfolioTests methodsFor: 'testing - balance' stamp: 'AF 5/22/2022 20:43:21' prior: 50479201!
test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances

	| portfolio account1 account2 portfolioToAdd1 portfolioToAdd2 expectedBalance |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd1 _ Portfolio new.
	portfolioToAdd2 _ Portfolio new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.	
	
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.	
	
	portfolioToAdd1 addBankAccount: account1.	
	portfolioToAdd2 addBankAccount: account2.	
	
	portfolio addBankAccount: portfolioToAdd1.
	portfolio addBankAccount: portfolioToAdd2.
	
	expectedBalance _ portfolioToAdd2 balance + portfolioToAdd1 balance
	
	self assert: 150 equals: portfolio balance
	
! !
!PortfolioTests methodsFor: 'testing - balance' stamp: 'AF 5/22/2022 20:43:34' prior: 50480726!
test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances

	| portfolio account1 account2 portfolioToAdd1 portfolioToAdd2 expectedBalance |
	
	account1 _ ReceptiveAccount new.	
	account2 _ ReceptiveAccount new.
	portfolioToAdd1 _ Portfolio new.
	portfolioToAdd2 _ Portfolio new.
	portfolio _ Portfolio new.
	
	Deposit register: 100 on: account1.	
	
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.	
	
	portfolioToAdd1 addBankAccount: account1.	
	portfolioToAdd2 addBankAccount: account2.	
	
	portfolio addBankAccount: portfolioToAdd1.
	portfolio addBankAccount: portfolioToAdd2.
	
	expectedBalance _ portfolioToAdd2 balance + portfolioToAdd1 balance.
	
	self assert: expectedBalance equals: portfolio balance
	
! !

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test01AnEmptyPortfolioShouldHaveZeroBalance stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test02BalanceOfPortfolioWithAnAccountShouldBeAccountBalance stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test03BalanceOfPortfolioWithPortfolioShouldBeInnerPortfolioBalance stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test05BalanceOfPortfolioWithAccountsShouldBeTheSumOfAccountsBalances stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test06AnEmptyPortfolioShouldNotHaveAnyTransactions stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test07TransactionsOfPortfolioWithAnAccountShouldBeAccountTransactions stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test08TransactionsOfPortfolioWithAccountsShouldBeAccountsTransactions stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test10PortfolioWithAnAccountShouldHaveItsAccountTransactionRegistered stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test11PortfolioWithAccountsShouldHaveItsAccountsTransactionsRegistered stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test12AddingPortfolioToItselfShouldRaiseAnError stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test13AddingAPortfolioTwiceShouldRaiseAnError stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test14AddingAnAccountThatIsRegisteredInADescendantShouldRaiseAnError stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test15AddingAParentShouldRaiseAnError stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test17AddingAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:43:34'!
PASSED!

!testRun: #PortfolioTests #test18AddingAnAccountToAPortfolioThatIsAlreadyADescendantOfAnAncestorShouldRaiseAnError stamp: 'AF 5/22/2022 20:43:34'!
PASSED!